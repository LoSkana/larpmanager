# Generated by Django 5.2 on 2025-05-11 15:18

import datetime

import colorfield.fields
import django.core.validators
import django.db.models.deletion
import model_clone.mixin
import phonenumber_field.modelfields
import tinymce.models
from django.conf import settings
from django.db import migrations, models

import larpmanager.models.utils


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Association",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(help_text="Complete name of the LARP Organization", max_length=100)),
                (
                    "slug",
                    models.CharField(
                        db_index=True,
                        help_text="Only lowercase characters and numbers are allowed, no spaces or symbols",
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[0-9a-z_-]*$", "Only characters allowed are: 0-9, a-z, _, -."
                            )
                        ],
                        verbose_name="URL identifier",
                    ),
                ),
                ("activated", models.DateTimeField(auto_now_add=True, null=True)),
                (
                    "profile",
                    models.ImageField(
                        help_text="Logo image - you can upload a file of any size, it will be automatically resized",
                        max_length=500,
                        null=True,
                        upload_to=larpmanager.models.utils.UploadToPathAndRename("association/"),
                        verbose_name="Logo",
                    ),
                ),
                ("mandatory_fields", models.CharField(blank=True, max_length=1000)),
                ("optional_fields", models.CharField(blank=True, max_length=1000)),
                (
                    "main_mail",
                    models.EmailField(help_text="Please indicate an email for the organization", max_length=254),
                ),
                (
                    "payment_currency",
                    models.CharField(
                        blank=True,
                        choices=[("e", "EUR"), ("u", "USD"), ("g", "GBP"), ("c", "CAD"), ("j", "JPY")],
                        default="e",
                        help_text="Indicates the currency in which to receive payments",
                        max_length=1,
                        null=True,
                        verbose_name="Payment currency",
                    ),
                ),
                (
                    "promoter",
                    models.ImageField(
                        blank=True,
                        help_text="Image shown on homepage as promoter",
                        max_length=500,
                        null=True,
                        upload_to=larpmanager.models.utils.UploadToPathAndRename("promot/"),
                    ),
                ),
                (
                    "background",
                    models.ImageField(
                        blank=True,
                        help_text="Background of web pages",
                        max_length=500,
                        upload_to="assoc_background/",
                        verbose_name="Background image",
                    ),
                ),
                (
                    "font",
                    models.FileField(
                        blank=True,
                        help_text="Font to be used in page titles",
                        null=True,
                        upload_to=larpmanager.models.utils.UploadToPathAndRename("assoc_font/"),
                        verbose_name="Title font",
                    ),
                ),
                ("css_code", models.CharField(default="", editable=False, max_length=32)),
                (
                    "pri_rgb",
                    colorfield.fields.ColorField(
                        blank=True,
                        default=None,
                        help_text="Indicate the color that will be used for the texts",
                        image_field=None,
                        max_length=25,
                        null=True,
                        samples=None,
                        verbose_name="Color texts",
                    ),
                ),
                (
                    "sec_rgb",
                    colorfield.fields.ColorField(
                        blank=True,
                        default=None,
                        help_text="Indicate the color that will be used for the background of texts",
                        image_field=None,
                        max_length=25,
                        null=True,
                        samples=None,
                        verbose_name="Color background",
                    ),
                ),
                (
                    "ter_rgb",
                    colorfield.fields.ColorField(
                        blank=True,
                        default=None,
                        help_text="Indicate the color that will be used for the links",
                        image_field=None,
                        max_length=25,
                        null=True,
                        samples=None,
                        verbose_name="Color links",
                    ),
                ),
                ("plan", models.CharField(choices=[("f", "Free"), ("p", "Support")], default="f", max_length=1)),
                (
                    "gdpr_contract",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=larpmanager.models.utils.UploadToPathAndRename("contract/gdpr/"),
                    ),
                ),
                ("review_done", models.BooleanField(default=False)),
                ("images_shared", models.BooleanField(default=False)),
                ("key", models.BinaryField(null=True)),
            ],
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="CharacterQuestion",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "typ",
                    models.CharField(
                        choices=[
                            ("s", "Single choice"),
                            ("m", "Multiple choice"),
                            ("t", "Text (short)"),
                            ("p", "Text (long)"),
                            ("name", "Name"),
                            ("teaser", "Presentation"),
                            ("text", "Sheet"),
                            ("concept", "Concept"),
                            ("cover", "Cover"),
                            ("faction", "Factions"),
                            ("title", "Title"),
                            ("mirror", "Mirror"),
                            ("props", "Prop"),
                            ("role", "Role"),
                            ("gender", "Gender"),
                            ("special", "Special"),
                            ("hide", "Hide"),
                            ("keywords", "Keywords"),
                            ("safety", "Safety"),
                            ("progress", "Progress"),
                            ("assigned", "Assigned"),
                        ],
                        default="s",
                        help_text="Question type",
                        max_length=10,
                        verbose_name="Type",
                    ),
                ),
                ("search", models.CharField(editable=False, max_length=1000)),
                (
                    "display",
                    models.CharField(help_text="Question display text", max_length=100, verbose_name="Display"),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        help_text="Extended description (will be shown in gray, in small)",
                        max_length=1000,
                        verbose_name="Description",
                    ),
                ),
                (
                    "order",
                    models.IntegerField(
                        default=0, help_text="Display order with respect to all questions", verbose_name="Order"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("o", "Optional"), ("m", "Mandatory"), ("d", "Disabled"), ("h", "Hidden")],
                        default="o",
                        help_text="Question status",
                        max_length=1,
                        verbose_name="Status",
                    ),
                ),
                (
                    "visibility",
                    models.CharField(
                        choices=[("s", "Searchable"), ("c", "Public"), ("e", "Private")],
                        default="e",
                        help_text="Searchable: Characters can be filtered according to this question. Public: The answer to this question is publicly visible. Private: The answer to this question is only visible to the player and organisers.",
                        max_length=1,
                        verbose_name="Visibility",
                    ),
                ),
                (
                    "editable",
                    models.CharField(
                        default="",
                        help_text="This field can be edited by the player only when the character is in one of the selected statuses",
                        max_length=20,
                        null=True,
                        verbose_name="Editable",
                    ),
                ),
                (
                    "max_length",
                    models.IntegerField(
                        default=0,
                        help_text="For text questions, maximum number of characters; For multiple options, maximum number of options (0 = no limit)",
                        verbose_name="Maximum length",
                    ),
                ),
                (
                    "printable",
                    models.BooleanField(
                        default=True,
                        help_text="Indicate whether the field is printed in PDF generations",
                        verbose_name="Printable",
                    ),
                ),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Feature",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=100)),
                ("descr", models.TextField(blank=True, max_length=500)),
                (
                    "slug",
                    models.SlugField(
                        max_length=100,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[0-9a-z_-]*$", "Only characters allowed are: 0-9, a-z, _, -."
                            )
                        ],
                    ),
                ),
                ("order", models.IntegerField()),
                ("overall", models.BooleanField(default=False)),
                ("link", models.CharField(blank=True, max_length=500)),
                ("tutorial", models.CharField(blank=True, max_length=500)),
                ("placeholder", models.BooleanField(default=False)),
            ],
            options={
                "ordering": ["module", "order"],
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="FeatureModule",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=100)),
                ("descr", models.TextField(max_length=500)),
                ("order", models.IntegerField()),
                ("default", models.BooleanField(default=False)),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="LarpManagerBlog",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("number", models.IntegerField(blank=True, null=True)),
                ("title", models.CharField(max_length=1000)),
                ("description", models.CharField(max_length=1000, null=True)),
                (
                    "slug",
                    models.SlugField(
                        max_length=100,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[0-9a-z_-]*$", "Only characters allowed are: 0-9, a-z, _, -."
                            )
                        ],
                    ),
                ),
                ("text", tinymce.models.HTMLField(blank=True, null=True)),
                (
                    "photo",
                    models.ImageField(
                        max_length=500,
                        upload_to=larpmanager.models.utils.UploadToPathAndRename("albums/"),
                        verbose_name="Photo",
                    ),
                ),
                ("published", models.BooleanField(default=False)),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="LarpManagerDiscover",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("order", models.IntegerField()),
                ("name", models.CharField(max_length=100)),
                ("text", tinymce.models.HTMLField()),
                (
                    "profile",
                    models.ImageField(
                        blank=True, null=True, upload_to=larpmanager.models.utils.UploadToPathAndRename("discover/")
                    ),
                ),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="LarpManagerFaqType",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("order", models.IntegerField()),
                ("name", models.CharField(max_length=100)),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="LarpManagerHowto",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("order", models.IntegerField()),
                ("name", models.CharField(max_length=100)),
                ("descr", models.TextField(max_length=500)),
                ("link", models.CharField(blank=True, max_length=500)),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="LarpManagerReview",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("text", models.CharField(max_length=1000)),
                ("author", models.CharField(max_length=100)),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="LarpManagerShowcase",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("number", models.IntegerField(blank=True, null=True)),
                ("title", models.CharField(max_length=1000)),
                ("text", tinymce.models.HTMLField(blank=True, null=True)),
                ("info", models.CharField(max_length=1000)),
                (
                    "photo",
                    models.ImageField(
                        max_length=500,
                        upload_to=larpmanager.models.utils.UploadToPathAndRename("showcase/"),
                        verbose_name="Photo",
                    ),
                ),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="LarpManagerTutorial",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=100)),
                (
                    "slug",
                    models.SlugField(
                        blank=True,
                        max_length=100,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[0-9a-z_-]*$", "Only characters allowed are: 0-9, a-z, _, -."
                            )
                        ],
                    ),
                ),
                ("descr", tinymce.models.HTMLField(blank=True, null=True)),
                ("order", models.IntegerField()),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="PaymentMethod",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=100)),
                (
                    "slug",
                    models.SlugField(
                        max_length=100,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[0-9a-z_-]*$", "Only characters allowed are: 0-9, a-z, _, -."
                            )
                        ],
                    ),
                ),
                ("instructions", tinymce.models.HTMLField(blank=True, null=True)),
                ("fields", models.CharField(max_length=500)),
                (
                    "profile",
                    models.ImageField(
                        help_text="Logo image (you can upload a file of any size, it will be resized automatically)",
                        max_length=500,
                        null=True,
                        upload_to=larpmanager.models.utils.UploadToPathAndRename("payment_methods/"),
                        verbose_name="Logo",
                    ),
                ),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Album",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=70)),
                (
                    "cover",
                    models.ImageField(
                        blank=True,
                        max_length=500,
                        upload_to=larpmanager.models.utils.UploadToPathAndRename("albums/cover/"),
                    ),
                ),
                ("is_visible", models.BooleanField(default=True)),
                ("cod", models.SlugField(default=larpmanager.models.utils.my_uuid, max_length=32, unique=True)),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="sub_albums",
                        to="larpmanager.album",
                    ),
                ),
                ("assoc", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.association")),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="AlbumUpload",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=70)),
                ("typ", models.CharField(choices=[("p", "Photo")], max_length=1)),
                (
                    "album",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="uploads", to="larpmanager.album"
                    ),
                ),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="AlbumImage",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("original", models.ImageField(upload_to=larpmanager.models.utils.UploadToPathAndRename("albums/"))),
                ("width", models.IntegerField(default=0)),
                ("height", models.IntegerField(default=0)),
                (
                    "upload",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, related_name="image", to="larpmanager.albumupload"
                    ),
                ),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Character",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("number", models.IntegerField()),
                ("name", models.CharField(max_length=150)),
                (
                    "concept",
                    models.TextField(
                        blank=True, help_text="Concept for internal use only. Will not be published", max_length=5000
                    ),
                ),
                (
                    "teaser",
                    tinymce.models.HTMLField(
                        blank=True,
                        help_text="Presentation visible to all players, when 'show presentation' is checked",
                        max_length=10000,
                        verbose_name="Presentation",
                    ),
                ),
                (
                    "text",
                    tinymce.models.HTMLField(
                        blank=True,
                        help_text="Text visible only by the assigned player, when 'show text' is checked",
                        max_length=100000,
                    ),
                ),
                (
                    "preview",
                    tinymce.models.HTMLField(
                        blank=True,
                        help_text="Preview visible only by the assigned player, when 'show preview' is checked",
                        max_length=10000,
                    ),
                ),
                ("temp", models.BooleanField(default=False)),
                ("props", models.CharField(blank=True, help_text="Does it require special props?", max_length=500)),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        help_text="Indicates the title of the character - it will be shown along with the name",
                        max_length=100,
                    ),
                ),
                (
                    "motto",
                    tinymce.models.HTMLField(
                        blank=True, help_text="Indicates the character's motto - a short phrase", max_length=500
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        blank=True,
                        help_text="Indicates the functional role / archetype of the character",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "safety",
                    models.CharField(
                        blank=True, help_text="Indicates accurate safety information", max_length=500, null=True
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[("m", "Male"), ("f", "Female"), ("u", "Unisex")],
                        default=None,
                        help_text="Select the character's gender",
                        max_length=1,
                        null=True,
                        verbose_name="Gender",
                    ),
                ),
                (
                    "keywords",
                    models.CharField(
                        blank=True, help_text="Select the character's key words", max_length=500, null=True
                    ),
                ),
                (
                    "special",
                    models.CharField(
                        blank=True,
                        choices=[("", "No"), ("n", "NPC"), ("f", "Filler")],
                        default="",
                        help_text="Is the character a special type? If not leave blank",
                        max_length=1,
                    ),
                ),
                ("hide", models.BooleanField(default=False)),
                (
                    "cover",
                    models.ImageField(
                        blank=True,
                        help_text="Cover photo fo the character",
                        max_length=500,
                        null=True,
                        upload_to=larpmanager.models.utils.UploadToPathAndRename("character/cover/"),
                        verbose_name="Character cover",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("c", "Creation"), ("s", "Proposed"), ("r", "Revision"), ("a", "Approved")],
                        default="c",
                        max_length=1,
                        verbose_name="Status",
                    ),
                ),
                (
                    "mirror",
                    models.OneToOneField(
                        blank=True,
                        help_text="Indicate whether the character is a mirror (i.e., whether this pg shows the true secret face of another character)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="mirror_inv",
                        to="larpmanager.character",
                    ),
                ),
            ],
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="CharacterOption",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("search", models.CharField(editable=False, max_length=1000)),
                ("display", models.CharField(max_length=50)),
                (
                    "details",
                    models.CharField(
                        blank=True,
                        help_text="Optional - Indicates additional details on the option, will be shown below the question",
                        max_length=500,
                        null=True,
                        verbose_name="Description",
                    ),
                ),
                (
                    "max_available",
                    models.IntegerField(
                        default=0,
                        help_text="Indicates the maximum number of times it can be requested (0 for infinite)",
                    ),
                ),
                (
                    "order",
                    models.IntegerField(
                        default=0, help_text="Order in which the option is shown with respect to the others"
                    ),
                ),
                (
                    "dependents",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Indicates other options that must be selected for this option to be selectable",
                        related_name="dependents_inv",
                        to="larpmanager.characteroption",
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="options",
                        to="larpmanager.characterquestion",
                    ),
                ),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="CharacterChoice",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "character",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="choices", to="larpmanager.character"
                    ),
                ),
                (
                    "option",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="choices",
                        to="larpmanager.characteroption",
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="choices",
                        to="larpmanager.characterquestion",
                    ),
                ),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="CharacterAnswer",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("text", models.TextField(max_length=5000)),
                (
                    "character",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="answers", to="larpmanager.character"
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="answers",
                        to="larpmanager.characterquestion",
                    ),
                ),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Competence",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(help_text="The name of the competence", max_length=100)),
                (
                    "descr",
                    models.CharField(help_text="A description of the skills / abilities involved", max_length=5000),
                ),
                ("assoc", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.association")),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "slug",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Only lowercase characters and numbers are allowed, no spaces or symbols",
                        max_length=30,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[0-9a-z_-]*$", "Only characters allowed are: 0-9, a-z, _, -."
                            )
                        ],
                        verbose_name="URL identifier",
                    ),
                ),
                (
                    "lang",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("aa", "Afar"),
                            ("ab", "Abkhazian"),
                            ("af", "Afrikaans"),
                            ("ak", "Akan"),
                            ("sq", "Albanian"),
                            ("am", "Amharic"),
                            ("ar", "Arabic"),
                            ("an", "Aragonese"),
                            ("hy", "Armenian"),
                            ("as", "Assamese"),
                            ("av", "Avaric"),
                            ("ae", "Avestan"),
                            ("ay", "Aymara"),
                            ("az", "Azerbaijani"),
                            ("ba", "Bashkir"),
                            ("bm", "Bambara"),
                            ("eu", "Basque"),
                            ("be", "Belarusian"),
                            ("bn", "Bengali"),
                            ("bh", "Bihari languages"),
                            ("bi", "Bislama"),
                            ("bo", "Tibetan"),
                            ("bs", "Bosnian"),
                            ("br", "Breton"),
                            ("bg", "Bulgarian"),
                            ("my", "Burmese"),
                            ("ca", "Catalan; Valencian"),
                            ("cs", "Czech"),
                            ("ch", "Chamorro"),
                            ("ce", "Chechen"),
                            ("zh", "Chinese"),
                            ("cu", "Church Slavic"),
                            ("cv", "Chuvash"),
                            ("kw", "Cornish"),
                            ("co", "Corsican"),
                            ("cr", "Cree"),
                            ("cy", "Welsh"),
                            ("cs", "Czech"),
                            ("da", "Danish"),
                            ("de", "German"),
                            ("dv", "Divehi"),
                            ("nl", "Dutch; Flemish"),
                            ("dz", "Dzongkha"),
                            ("en", "English"),
                            ("eo", "Esperanto"),
                            ("et", "Estonian"),
                            ("eu", "Basque"),
                            ("ee", "Ewe"),
                            ("fo", "Faroese"),
                            ("fa", "Persian"),
                            ("fj", "Fijian"),
                            ("fi", "Finnish"),
                            ("fr", "French"),
                            ("fy", "Western Frisian"),
                            ("ff", "Fulah"),
                            ("Ga", "Georgian"),
                            ("de", "German"),
                            ("gd", "Gaelic"),
                            ("ga", "Irish"),
                            ("gl", "Galician"),
                            ("gv", "Manx"),
                            ("el", "Greek"),
                            ("gn", "Guarani"),
                            ("gu", "Gujarati"),
                            ("ht", "Haitian"),
                            ("ha", "Hausa"),
                            ("he", "Hebrew"),
                            ("hz", "Herero"),
                            ("hi", "Hindi"),
                            ("ho", "Hiri Motu"),
                            ("hr", "Croatian"),
                            ("hu", "Hungarian"),
                            ("hy", "Armenian"),
                            ("ig", "Igbo"),
                            ("is", "Icelandic"),
                            ("io", "Ido"),
                            ("ii", "Sichuan Yi"),
                            ("iu", "Inuktitut"),
                            ("id", "Indonesian"),
                            ("ik", "Inupiaq"),
                            ("is", "Icelandic"),
                            ("it", "Italiano"),
                            ("jv", "Javanese"),
                            ("ja", "Japanese"),
                            ("kl", "Kalaallisut; Greenlandic"),
                            ("kn", "Kannada"),
                            ("ks", "Kashmiri"),
                            ("ka", "Georgian"),
                            ("kr", "Kanuri"),
                            ("kk", "Kazakh"),
                            ("km", "Central Khmer"),
                            ("ki", "Kikuyu; Gikuyu"),
                            ("rw", "Kinyarwanda"),
                            ("ky", "Kirghiz; Kyrgyz"),
                            ("kv", "Komi"),
                            ("kg", "Kongo"),
                            ("ko", "Korean"),
                            ("kj", "Kuanyama; Kwanyama"),
                            ("ku", "Kurdish"),
                            ("lo", "Lao"),
                            ("la", "Latin"),
                            ("lv", "Latvian"),
                            ("li", "Limburgan"),
                            ("ln", "Lingala"),
                            ("lt", "Lithuanian"),
                            ("lb", "Luxembourgish"),
                            ("lu", "Luba-Katanga"),
                            ("lg", "Ganda"),
                            ("mk", "Macedonian"),
                            ("mh", "Marshallese"),
                            ("ml", "Malayalam"),
                            ("mi", "Maori"),
                            ("mr", "Marathi"),
                            ("ms", "Malay"),
                            ("Mi", "Micmac"),
                            ("mk", "Macedonian"),
                            ("mg", "Malagasy"),
                            ("mt", "Maltese"),
                            ("mn", "Mongolian"),
                            ("mi", "Maori"),
                            ("ms", "Malay"),
                            ("my", "Burmese"),
                            ("na", "Nauru"),
                            ("nv", "Navajo; Navaho"),
                            ("nr", "Ndebele, South"),
                            ("nd", "Ndebele, North"),
                            ("ng", "Ndonga"),
                            ("ne", "Nepali"),
                            ("nl", "Dutch; Flemish"),
                            ("nn", "Norwegian Nynorsk"),
                            ("nb", "Norwegian Bokmål"),
                            ("no", "Norwegian"),
                            ("oc", "Occitan (post 1500)"),
                            ("oj", "Ojibwa"),
                            ("or", "Oriya"),
                            ("om", "Oromo"),
                            ("os", "Ossetian; Ossetic"),
                            ("pa", "Panjabi; Punjabi"),
                            ("fa", "Persian"),
                            ("pi", "Pali"),
                            ("pl", "Polish"),
                            ("pt", "Portuguese"),
                            ("ps", "Pushto; Pashto"),
                            ("qu", "Quechua"),
                            ("rm", "Romansh"),
                            ("ro", "Romanian; Moldavian; Moldovan"),
                            ("ro", "Romanian; Moldavian; Moldovan"),
                            ("rn", "Rundi"),
                            ("ru", "Russian"),
                            ("sg", "Sango"),
                            ("sa", "Sanskrit"),
                            ("si", "Sinhala; Sinhalese"),
                            ("sk", "Slovak"),
                            ("sk", "Slovak"),
                            ("sl", "Slovenian"),
                            ("se", "Northern Sami"),
                            ("sm", "Samoan"),
                            ("sn", "Shona"),
                            ("sd", "Sindhi"),
                            ("so", "Somali"),
                            ("st", "Sotho, Southern"),
                            ("es", "Spanish; Castilian"),
                            ("sq", "Albanian"),
                            ("sc", "Sardinian"),
                            ("sr", "Serbian"),
                            ("ss", "Swati"),
                            ("su", "Sundanese"),
                            ("sw", "Swahili"),
                            ("sv", "Swedish"),
                            ("ty", "Tahitian"),
                            ("ta", "Tamil"),
                            ("tt", "Tatar"),
                            ("te", "Telugu"),
                            ("tg", "Tajik"),
                            ("tl", "Tagalog"),
                            ("th", "Thai"),
                            ("bo", "Tibetan"),
                            ("ti", "Tigrinya"),
                            ("to", "Tonga (Tonga Islands)"),
                            ("tn", "Tswana"),
                            ("ts", "Tsonga"),
                            ("tk", "Turkmen"),
                            ("tr", "Turkish"),
                            ("tw", "Twi"),
                            ("ug", "Uighur; Uyghur"),
                            ("uk", "Ukrainian"),
                            ("ur", "Urdu"),
                            ("uz", "Uzbek"),
                            ("ve", "Venda"),
                            ("vi", "Vietnamese"),
                            ("vo", "Volapük"),
                            ("cy", "Welsh"),
                            ("wa", "Walloon"),
                            ("wo", "Wolof"),
                            ("xh", "Xhosa"),
                            ("yi", "Yiddish"),
                            ("yo", "Yoruba"),
                            ("za", "Zhuang; Chuang"),
                            ("zh", "Chinese"),
                            ("zu", "Zulu"),
                        ],
                        max_length=2,
                        null=True,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "tagline",
                    models.CharField(
                        blank=True,
                        help_text="A short tagline, slogan",
                        max_length=500,
                        null=True,
                        verbose_name="Tagline",
                    ),
                ),
                ("where", models.CharField(blank=True, help_text="Where it is held", max_length=500, null=True)),
                (
                    "authors",
                    models.CharField(
                        blank=True,
                        help_text="Names of the collaborators who are organizing it",
                        max_length=500,
                        null=True,
                        verbose_name="Authors",
                    ),
                ),
                (
                    "description_short",
                    tinymce.models.HTMLField(blank=True, max_length=1000, null=True, verbose_name="Short description"),
                ),
                (
                    "description",
                    tinymce.models.HTMLField(
                        blank=True,
                        help_text="Will be shown in the event page",
                        max_length=6000,
                        verbose_name="Long description",
                    ),
                ),
                (
                    "genre",
                    models.CharField(
                        blank=True, help_text="The setting / genre of the event", max_length=100, verbose_name="Genre"
                    ),
                ),
                ("visible", models.BooleanField(default=True)),
                (
                    "cover",
                    models.ImageField(
                        blank=True,
                        help_text="Cover in rectangular format - aspect ratio 4:3",
                        max_length=500,
                        upload_to="cover/",
                    ),
                ),
                (
                    "carousel_img",
                    models.ImageField(blank=True, help_text="Carousel image", max_length=500, upload_to="carousel/"),
                ),
                (
                    "carousel_text",
                    tinymce.models.HTMLField(blank=True, max_length=2000, verbose_name="Carousel description"),
                ),
                ("website", models.URLField(blank=True, max_length=100, verbose_name="Website")),
                ("register_link", models.URLField(blank=True, max_length=150, verbose_name="External register link")),
                (
                    "max_pg",
                    models.IntegerField(
                        default=0,
                        help_text="Maximum number of primary spots to be managed (0 for infinite)",
                        verbose_name="Number of primary spots",
                    ),
                ),
                (
                    "max_filler",
                    models.IntegerField(
                        default=0,
                        help_text="Maximum number of fillers to manage (0 for infinite)",
                        verbose_name="Number of filler spots",
                    ),
                ),
                (
                    "max_waiting",
                    models.IntegerField(
                        default=0,
                        help_text="Maximum number of waiting spots to manage (0 for infinite)",
                        verbose_name="Number of waiting spots",
                    ),
                ),
                (
                    "background",
                    models.ImageField(
                        blank=True,
                        help_text="Background of web pages",
                        max_length=500,
                        upload_to="event_background/",
                        verbose_name="Background image",
                    ),
                ),
                (
                    "font",
                    models.FileField(
                        blank=True,
                        help_text="Font to be used in page titles",
                        null=True,
                        upload_to=larpmanager.models.utils.UploadToPathAndRename("event_font/"),
                        verbose_name="Title font",
                    ),
                ),
                ("css_code", models.CharField(default="", editable=False, max_length=32)),
                (
                    "pri_rgb",
                    colorfield.fields.ColorField(
                        blank=True,
                        default=None,
                        help_text="Indicate the color that will be used for the texts",
                        image_field=None,
                        max_length=25,
                        null=True,
                        samples=None,
                        verbose_name="Color texts",
                    ),
                ),
                (
                    "sec_rgb",
                    colorfield.fields.ColorField(
                        blank=True,
                        default=None,
                        help_text="Indicate the color that will be used for the background of texts",
                        image_field=None,
                        max_length=25,
                        null=True,
                        samples=None,
                        verbose_name="Color background",
                    ),
                ),
                (
                    "ter_rgb",
                    colorfield.fields.ColorField(
                        blank=True,
                        default=None,
                        help_text="Indicate the color that will be used for the links",
                        image_field=None,
                        max_length=25,
                        null=True,
                        samples=None,
                        verbose_name="Color links",
                    ),
                ),
                ("template", models.BooleanField(default=False)),
                (
                    "assoc",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="events", to="larpmanager.association"
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        help_text="If the event is part of a campaign, specify the parent event whose characters will be shared",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="larpmanager.event",
                        verbose_name="Campaign",
                    ),
                ),
                ("features", models.ManyToManyField(blank=True, related_name="events", to="larpmanager.feature")),
            ],
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.AddField(
            model_name="characterquestion",
            name="event",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="char_questions", to="larpmanager.event"
            ),
        ),
        migrations.AddField(
            model_name="characteroption",
            name="event",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="char_options", to="larpmanager.event"
            ),
        ),
        migrations.AddField(
            model_name="character",
            name="event",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.event"),
        ),
        migrations.CreateModel(
            name="AbilityTypePx",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("number", models.IntegerField()),
                ("name", models.CharField(blank=True, max_length=150)),
                ("event", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.event")),
            ],
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="AbilityPx",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("number", models.IntegerField()),
                ("name", models.CharField(max_length=150)),
                ("cost", models.IntegerField()),
                ("descr", tinymce.models.HTMLField(blank=True, max_length=5000, null=True)),
                (
                    "visible",
                    models.BooleanField(
                        default=True,
                        help_text="Indicate whether the ability is visible to users, and can be freely purchased",
                    ),
                ),
                (
                    "prerequisites",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Indicate the prerequisite abilities, which must be possessed before one can acquire this",
                        related_name="px_ability_unlock",
                        to="larpmanager.abilitypx",
                        verbose_name="Pre-requisites",
                    ),
                ),
                (
                    "typ",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="abilities",
                        to="larpmanager.abilitytypepx",
                    ),
                ),
                (
                    "characters",
                    models.ManyToManyField(blank=True, related_name="px_ability_list", to="larpmanager.character"),
                ),
                (
                    "dependents",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Indicate the character options, which must be selected to make the skill available",
                        related_name="abilities",
                        to="larpmanager.characteroption",
                        verbose_name="Options required",
                    ),
                ),
                ("event", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.event")),
            ],
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="EventButton",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("number", models.IntegerField()),
                ("name", models.CharField(max_length=150)),
                ("tooltip", models.CharField(max_length=200)),
                ("link", models.URLField(max_length=150)),
                ("event", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.event")),
            ],
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="EventConfig",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=150)),
                ("value", models.CharField(max_length=1000)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="configs", to="larpmanager.event"
                    ),
                ),
            ],
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="EventText",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("number", models.IntegerField(blank=True, null=True)),
                ("text", tinymce.models.HTMLField(blank=True, null=True)),
                (
                    "typ",
                    models.CharField(
                        choices=[
                            ("t", "Terms and conditions"),
                            ("r", "Registration form"),
                            ("s", "Search"),
                            ("g", "Registration mail"),
                            ("a", "Mail assignment"),
                            ("cs", "Proposed character"),
                            ("ca", "Approved character"),
                            ("cr", "Character review"),
                        ],
                        max_length=2,
                        verbose_name="Type",
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        choices=[
                            ("en", "English"),
                            ("it", "Italiano"),
                            ("es", "Español"),
                            ("de", "Deutsch"),
                            ("fr", "Français"),
                            ("cs", "Čeština"),
                            ("pl", "Polski"),
                            ("nl", "Nederlands"),
                            ("nb", "Norsk"),
                            ("sv", "Svenska"),
                        ],
                        default="en",
                        help_text="Text language",
                        max_length=3,
                        null=True,
                        verbose_name="Language",
                    ),
                ),
                ("default", models.BooleanField(default=True)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="texts", to="larpmanager.event"
                    ),
                ),
            ],
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="EventPermission",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=100)),
                (
                    "slug",
                    models.SlugField(
                        blank=True,
                        max_length=100,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[0-9a-z_-]*$", "Only characters allowed are: 0-9, a-z, _, -."
                            )
                        ],
                    ),
                ),
                ("number", models.IntegerField(blank=True)),
                (
                    "feature",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="event_permissions",
                        to="larpmanager.feature",
                    ),
                ),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="AssocPermission",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=100)),
                (
                    "slug",
                    models.SlugField(
                        blank=True,
                        max_length=100,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[0-9a-z_-]*$", "Only characters allowed are: 0-9, a-z, _, -."
                            )
                        ],
                    ),
                ),
                ("number", models.IntegerField(blank=True)),
                (
                    "feature",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assoc_permissions",
                        to="larpmanager.feature",
                    ),
                ),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.AddField(
            model_name="association",
            name="features",
            field=models.ManyToManyField(blank=True, related_name="associations", to="larpmanager.feature"),
        ),
        migrations.AddField(
            model_name="feature",
            name="module",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="features",
                to="larpmanager.featuremodule",
            ),
        ),
        migrations.CreateModel(
            name="HandoutTemplate",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("number", models.IntegerField()),
                ("name", models.CharField(max_length=150)),
                ("css", models.TextField(blank=True, null=True)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="handout_templates",
                        to="larpmanager.event",
                    ),
                ),
            ],
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="InventoryBox",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("cod", models.CharField(max_length=5)),
                ("name", models.CharField(help_text="Briefly describe what the box contains", max_length=500)),
                ("shelf", models.CharField(max_length=5)),
                ("rack", models.CharField(max_length=5)),
                (
                    "description",
                    models.TextField(
                        help_text="Fully describe what the box contains, especially number of items, main features, state of preservation."
                    ),
                ),
                ("tag", models.CharField(help_text="List of content-related tags", max_length=100)),
                (
                    "photo",
                    models.ImageField(
                        blank=True,
                        help_text="Photo (clear and understandable) of the object",
                        max_length=500,
                        null=True,
                        upload_to=larpmanager.models.utils.UploadToPathAndRename("inventory/"),
                        verbose_name="Photo",
                    ),
                ),
                (
                    "assoc",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="boxes", to="larpmanager.association"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="InventoryBoxPhoto",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "photo",
                    models.ImageField(
                        help_text="Photo (clear and understandable) of the object",
                        max_length=500,
                        upload_to=larpmanager.models.utils.UploadToPathAndRename("albums/"),
                        verbose_name="Photo",
                    ),
                ),
                (
                    "box",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="photos",
                        to="larpmanager.inventorybox",
                    ),
                ),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="LarpManagerFaq",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("number", models.IntegerField(blank=True, null=True)),
                ("question", models.CharField(max_length=1000)),
                ("answer", tinymce.models.HTMLField(blank=True, null=True)),
                (
                    "typ",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="faqs",
                        to="larpmanager.larpmanagerfaqtype",
                    ),
                ),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="LarpManagerProfiler",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("num_calls", models.IntegerField(default=0)),
                ("mean_duration", models.FloatField(default=0)),
                ("domain", models.CharField(max_length=100)),
                ("view_func_name", models.CharField(max_length=100, verbose_name="View function")),
                ("date", models.DateField()),
            ],
            options={
                "unique_together": {("domain", "view_func_name", "date")},
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Member",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("email", models.CharField(editable=False, max_length=200)),
                ("search", models.CharField(editable=False, max_length=200)),
                (
                    "language",
                    models.CharField(
                        choices=[
                            ("en", "English"),
                            ("it", "Italiano"),
                            ("es", "Español"),
                            ("de", "Deutsch"),
                            ("fr", "Français"),
                            ("cs", "Čeština"),
                            ("pl", "Polski"),
                            ("nl", "Nederlands"),
                            ("nb", "Norsk"),
                            ("sv", "Svenska"),
                        ],
                        default="en",
                        help_text="Preferred navigation language",
                        max_length=3,
                        null=True,
                        verbose_name="Navigation language",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
                ("surname", models.CharField(max_length=100, verbose_name="Surname")),
                (
                    "nickname",
                    models.CharField(
                        blank=True,
                        help_text="If you prefer that your real name and surname not be publicly visible, please indicate an alias that will be displayed instead. Note: If you register for an event, your real first and last name will be shown to other players, and to the organisers.",
                        max_length=100,
                        verbose_name="Alias",
                    ),
                ),
                (
                    "legal_name",
                    models.CharField(
                        blank=True,
                        help_text="If for whatever reason the first and last name shown on your documents is different from the one you prefer to use, then write it here. It will only be used for internal bureaucratic purposes, and will NEVER be displayed to other players.",
                        max_length=100,
                        null=True,
                        verbose_name="Legal name",
                    ),
                ),
                (
                    "pronoun",
                    models.CharField(
                        blank=True,
                        help_text="Indicate the pronouns you wish to be used to refer to you",
                        max_length=20,
                        null=True,
                        verbose_name="Pronouns",
                    ),
                ),
                (
                    "nationality",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("AF", "Afghanistan"),
                            ("AX", "Åland Islands"),
                            ("AL", "Albania"),
                            ("DZ", "Algeria"),
                            ("AS", "American Samoa"),
                            ("AD", "Andorra"),
                            ("AO", "Angola"),
                            ("AI", "Anguilla"),
                            ("AQ", "Antarctica"),
                            ("AG", "Antigua and Barbuda"),
                            ("AR", "Argentina"),
                            ("AM", "Armenia"),
                            ("AW", "Aruba"),
                            ("AU", "Australia"),
                            ("AT", "Austria"),
                            ("AZ", "Azerbaijan"),
                            ("BS", "Bahamas"),
                            ("BH", "Bahrain"),
                            ("BD", "Bangladesh"),
                            ("BB", "Barbados"),
                            ("BY", "Belarus"),
                            ("BE", "Belgium"),
                            ("BZ", "Belize"),
                            ("BJ", "Benin"),
                            ("BM", "Bermuda"),
                            ("BT", "Bhutan"),
                            ("BO", "Bolivia, Plurinational State of"),
                            ("BQ", "Bonaire, Sint Eustatius and Saba"),
                            ("BA", "Bosnia and Herzegovina"),
                            ("BW", "Botswana"),
                            ("BV", "Bouvet Island"),
                            ("BR", "Brazil"),
                            ("IO", "British Indian Ocean Territory"),
                            ("BN", "Brunei Darussalam"),
                            ("BG", "Bulgaria"),
                            ("BF", "Burkina Faso"),
                            ("BI", "Burundi"),
                            ("KH", "Cambodia"),
                            ("CM", "Cameroon"),
                            ("CA", "Canada"),
                            ("CV", "Cape Verde"),
                            ("KY", "Cayman Islands"),
                            ("CF", "Central African Republic"),
                            ("TD", "Chad"),
                            ("CL", "Chile"),
                            ("CN", "China"),
                            ("CX", "Christmas Island"),
                            ("CC", "Cocos (Keeling Islands)"),
                            ("CO", "Colombia"),
                            ("KM", "Comoros"),
                            ("CG", "Congo"),
                            ("CD", "Congo, The Democratic Republic of the"),
                            ("CK", "Cook Islands"),
                            ("CR", "Costa Rica"),
                            ("CI", "Côte D'ivoire"),
                            ("HR", "Croatia"),
                            ("CU", "Cuba"),
                            ("CW", "Curaçao"),
                            ("CY", "Cyprus"),
                            ("CZ", "Czech Republic"),
                            ("DK", "Denmark"),
                            ("DJ", "Djibouti"),
                            ("DM", "Dominica"),
                            ("DO", "Dominican Republic"),
                            ("EC", "Ecuador"),
                            ("EG", "Egypt"),
                            ("SV", "El Salvador"),
                            ("GQ", "Equatorial Guinea"),
                            ("ER", "Eritrea"),
                            ("EE", "Estonia"),
                            ("ET", "Ethiopia"),
                            ("FK", "Falkland Islands (Malvinas)"),
                            ("FO", "Faroe Islands"),
                            ("FJ", "Fiji"),
                            ("FI", "Finland"),
                            ("FR", "France"),
                            ("GF", "French Guiana"),
                            ("PF", "French Polynesia"),
                            ("TF", "French Southern Territories"),
                            ("GA", "Gabon"),
                            ("GM", "Gambia"),
                            ("GE", "Georgia"),
                            ("DE", "Germany"),
                            ("GH", "Ghana"),
                            ("GI", "Gibraltar"),
                            ("GR", "Greece"),
                            ("GL", "Greenland"),
                            ("GD", "Grenada"),
                            ("GP", "Guadeloupe"),
                            ("GU", "Guam"),
                            ("GT", "Guatemala"),
                            ("GG", "Guernsey"),
                            ("GN", "Guinea"),
                            ("GW", "Guinea-bissau"),
                            ("GY", "Guyana"),
                            ("HT", "Haiti"),
                            ("HM", "Heard Island and McDonald Islands"),
                            ("VA", "Holy See (Vatican City State)"),
                            ("HN", "Honduras"),
                            ("HK", "Hong Kong"),
                            ("HU", "Hungary"),
                            ("IS", "Iceland"),
                            ("IN", "India"),
                            ("ID", "Indonesia"),
                            ("IR", "Iran, Islamic Republic of"),
                            ("IQ", "Iraq"),
                            ("IE", "Ireland"),
                            ("IM", "Isle of Man"),
                            ("IL", "Israel"),
                            ("IT", "Italy"),
                            ("JM", "Jamaica"),
                            ("JP", "Japan"),
                            ("JE", "Jersey"),
                            ("JO", "Jordan"),
                            ("KZ", "Kazakhstan"),
                            ("KE", "Kenya"),
                            ("KI", "Kiribati"),
                            ("KP", "Korea, Democratic People's Republic of"),
                            ("KR", "Korea, Republic of"),
                            ("KW", "Kuwait"),
                            ("KG", "Kyrgyzstan"),
                            ("LA", "Lao People's Democratic Republic"),
                            ("LV", "Latvia"),
                            ("LB", "Lebanon"),
                            ("LS", "Lesotho"),
                            ("LR", "Liberia"),
                            ("LY", "Libya"),
                            ("LI", "Liechtenstein"),
                            ("LT", "Lithuania"),
                            ("LU", "Luxembourg"),
                            ("MO", "Macao"),
                            ("MK", "Macedonia, The Former Yugoslav Republic of"),
                            ("MG", "Madagascar"),
                            ("MW", "Malawi"),
                            ("MY", "Malaysia"),
                            ("MV", "Maldives"),
                            ("ML", "Mali"),
                            ("MT", "Malta"),
                            ("MH", "Marshall Islands"),
                            ("MQ", "Martinique"),
                            ("MR", "Mauritania"),
                            ("MU", "Mauritius"),
                            ("YT", "Mayotte"),
                            ("MX", "Mexico"),
                            ("FM", "Micronesia, Federated States of"),
                            ("MD", "Moldova, Republic of"),
                            ("MC", "Monaco"),
                            ("MN", "Mongolia"),
                            ("ME", "Montenegro"),
                            ("MS", "Montserrat"),
                            ("MA", "Morocco"),
                            ("MZ", "Mozambique"),
                            ("MM", "Myanmar"),
                            ("NA", "Namibia"),
                            ("NR", "Nauru"),
                            ("NP", "Nepal"),
                            ("NL", "Netherlands"),
                            ("NC", "New Caledonia"),
                            ("NZ", "New Zealand"),
                            ("NI", "Nicaragua"),
                            ("NE", "Niger"),
                            ("NG", "Nigeria"),
                            ("NU", "Niue"),
                            ("NF", "Norfolk Island"),
                            ("MP", "Northern Mariana Islands"),
                            ("NO", "Norway"),
                            ("OM", "Oman"),
                            ("PK", "Pakistan"),
                            ("PW", "Palau"),
                            ("PS", "Palestinian Territory, Occupied"),
                            ("PA", "Panama"),
                            ("PG", "Papua New Guinea"),
                            ("PY", "Paraguay"),
                            ("PE", "Peru"),
                            ("PH", "Philippines"),
                            ("PN", "Pitcairn"),
                            ("PL", "Poland"),
                            ("PT", "Portugal"),
                            ("PR", "Puerto Rico"),
                            ("QA", "Qatar"),
                            ("RE", "Réunion"),
                            ("RO", "Romania"),
                            ("RU", "Russian Federation"),
                            ("RW", "Rwanda"),
                            ("BL", "Saint Barthélemy"),
                            ("SH", "Saint Helena, Ascension and Tristan Da Cunha"),
                            ("KN", "Saint Kitts and Nevis"),
                            ("LC", "Saint Lucia"),
                            ("MF", "Saint Martin (French Part)"),
                            ("PM", "Saint Pierre and Miquelon"),
                            ("VC", "Saint Vincent and the Grenadines"),
                            ("WS", "Samoa"),
                            ("SM", "San Marino"),
                            ("ST", "Sao Tome and Principe"),
                            ("SA", "Saudi Arabia"),
                            ("SN", "Senegal"),
                            ("RS", "Serbia"),
                            ("SC", "Seychelles"),
                            ("SL", "Sierra Leone"),
                            ("SG", "Singapore"),
                            ("SX", "Sint Maarten (Dutch Part)"),
                            ("SK", "Slovakia"),
                            ("SI", "Slovenia"),
                            ("SB", "Solomon Islands"),
                            ("SO", "Somalia"),
                            ("ZA", "South Africa"),
                            ("GS", "South Georgia and the South Sandwich Islands"),
                            ("SS", "South Sudan"),
                            ("ES", "Spain"),
                            ("LK", "Sri Lanka"),
                            ("SD", "Sudan"),
                            ("SR", "Suriname"),
                            ("SJ", "Svalbard and Jan Mayen"),
                            ("SZ", "Swaziland"),
                            ("SE", "Sweden"),
                            ("CH", "Switzerland"),
                            ("SY", "Syrian Arab Republic"),
                            ("TW", "Taiwan, Province of China"),
                            ("TJ", "Tajikistan"),
                            ("TZ", "Tanzania, United Republic of"),
                            ("TH", "Thailand"),
                            ("TL", "Timor-leste"),
                            ("TG", "Togo"),
                            ("TK", "Tokelau"),
                            ("TO", "Tonga"),
                            ("TT", "Trinidad and Tobago"),
                            ("TN", "Tunisia"),
                            ("TR", "Turkey"),
                            ("TM", "Turkmenistan"),
                            ("TC", "Turks and Caicos Islands"),
                            ("TV", "Tuvalu"),
                            ("UG", "Uganda"),
                            ("UA", "Ukraine"),
                            ("AE", "United Arab Emirates"),
                            ("GB", "United Kingdom"),
                            ("US", "United States"),
                            ("UM", "United States Minor Outlying Islands"),
                            ("UY", "Uruguay"),
                            ("UZ", "Uzbekistan"),
                            ("VU", "Vanuatu"),
                            ("VE", "Venezuela, Bolivarian Republic of"),
                            ("VN", "Viet Nam"),
                            ("VG", "Virgin Islands, British"),
                            ("VI", "Virgin Islands, U.S."),
                            ("WF", "Wallis and Futuna"),
                            ("EH", "Western Sahara"),
                            ("YE", "Yemen"),
                            ("ZM", "Zambia"),
                            ("ZW", "Zimbabwe"),
                        ],
                        help_text="Indicate the country of which you are a citizen",
                        max_length=2,
                        null=True,
                        verbose_name="Nationality",
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[("m", "Male"), ("f", "Female"), ("o", "Other")],
                        default="o",
                        help_text="Indicates what gender you identify yourself as",
                        max_length=1,
                        null=True,
                        verbose_name="Gender",
                    ),
                ),
                (
                    "phone_contact",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True,
                        help_text="Remember to put the prefix at the beginning!",
                        max_length=128,
                        null=True,
                        region=None,
                        unique=True,
                        verbose_name="Phone contact",
                    ),
                ),
                (
                    "social_contact",
                    models.CharField(
                        blank=True,
                        help_text="Indicates a way for other players to contact you. It can be an email, a social profile, whatever you want. It will be made public to others players",
                        max_length=150,
                        null=True,
                        verbose_name="Contact",
                    ),
                ),
                (
                    "first_aid",
                    models.CharField(
                        choices=[("n", "No"), ("y", "Yes")],
                        default="n",
                        help_text="Are you a doctor, a nurse, or a licensed rescuer? We can ask you to intervene in case accidents occur during the event?",
                        max_length=1,
                        null=True,
                        verbose_name="First aid",
                    ),
                ),
                ("birth_date", models.DateField(blank=True, null=True, verbose_name="Birth date")),
                ("birth_place", models.CharField(blank=True, max_length=150, null=True, verbose_name="Birth place")),
                (
                    "fiscal_code",
                    models.CharField(
                        blank=True,
                        help_text="If you are an Italian citizen, indicate your tax code; otherwise leave blank",
                        max_length=16,
                        null=True,
                        verbose_name="Fiscal code",
                    ),
                ),
                (
                    "document_type",
                    models.CharField(
                        choices=[("i", "ID Card"), ("p", "Driver's License"), ("s", "Passport")],
                        default="i",
                        help_text="Indicates a type of identification document issued by the nation in which you reside",
                        max_length=1,
                        null=True,
                        verbose_name="Document type",
                    ),
                ),
                (
                    "document",
                    models.CharField(
                        blank=True,
                        help_text="Enter the number or code of the identification document indicated above",
                        max_length=16,
                        null=True,
                        verbose_name="Document number",
                    ),
                ),
                (
                    "document_issued",
                    models.DateField(blank=True, null=True, verbose_name="Date of issue of the document"),
                ),
                (
                    "document_expiration",
                    models.DateField(
                        blank=True,
                        help_text="Leave blank if the document has no expiration date - Please check that it does not expire before the event you want to signup up for.",
                        null=True,
                        verbose_name="Date of expiration of the document",
                    ),
                ),
                (
                    "residence_address",
                    models.CharField(blank=True, max_length=500, null=True, verbose_name="Residence address"),
                ),
                (
                    "accessibility",
                    models.CharField(
                        blank=True,
                        help_text="Fill in this field if you have accessibility needs.",
                        max_length=500,
                        null=True,
                        verbose_name="Accessibility",
                    ),
                ),
                (
                    "diet",
                    models.CharField(
                        blank=True,
                        help_text="Fill in this field if you follow a personal diet for reasons of choice(e.g. vegetarian, vegan) or health (celiac disease, allergies). Leave empty if you do not have things to report!",
                        max_length=500,
                        null=True,
                        verbose_name="Diet",
                    ),
                ),
                (
                    "safety",
                    models.CharField(
                        blank=True,
                        help_text="Fill in this field if there is something you think is important that the organizers know about you. It's up to you to decide what to share with us. This information will be treated as strictly confidential: only a restricted part of the organizers will have access to the answers, and will not be transmitted in any form. This information may concern: physical health problems, epilepsy, mental health problems (e.g. neurosis, bipolar disorder, anxiety disorder, various phobias), trigger topics ('lines and veils', we can't promise that you won't run into them in the event, but we'll make sure they're not part of your main quests). Leave empty if you do not have things to report!",
                        max_length=500,
                        null=True,
                        verbose_name="Safety",
                    ),
                ),
                (
                    "newsletter",
                    models.CharField(
                        choices=[
                            ("a", "Yes, keep me posted!"),
                            ("o", "Only really important communications."),
                            ("n", "No, I don't want updates."),
                        ],
                        default="a",
                        help_text="Do you wish to be always updated on our events?",
                        max_length=1,
                        null=True,
                        verbose_name="Newsletter",
                    ),
                ),
                (
                    "profile",
                    models.ImageField(
                        blank=True,
                        help_text="Upload your profile photo. It will be shown to other players together with the your character, so as to help recognize you in the event. Choose a photo that you would put in an official document (in which you are alone, centered on your face).",
                        max_length=500,
                        null=True,
                        upload_to=larpmanager.models.utils.UploadToPathAndRename("member/"),
                        verbose_name="Portrait",
                    ),
                ),
                (
                    "presentation",
                    models.CharField(
                        blank=True,
                        help_text="If you are a candidate for the Board, please write an introduction here!",
                        max_length=500,
                        null=True,
                        verbose_name="Presentation",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="delegated",
                        to="larpmanager.member",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, related_name="member", to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "ordering": ["surname", "name"],
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Log",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("eid", models.IntegerField()),
                ("cls", models.CharField(max_length=100)),
                ("dct", models.TextField()),
                ("dl", models.BooleanField(default=False)),
                ("member", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.member")),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="InventoryBoxHistory",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("cod", models.CharField(max_length=5)),
                ("name", models.CharField(help_text="Briefly describe what the box contains", max_length=500)),
                ("shelf", models.CharField(max_length=5)),
                ("rack", models.CharField(max_length=5)),
                (
                    "description",
                    models.TextField(
                        help_text="Fully describe what the box contains, especially number of items, main features, state of preservation."
                    ),
                ),
                ("tag", models.CharField(help_text="List of content-related tags", max_length=100)),
                (
                    "photo",
                    models.ImageField(
                        blank=True,
                        help_text="Photo (clear and understandable) of the object",
                        max_length=500,
                        null=True,
                        upload_to=larpmanager.models.utils.UploadToPathAndRename("inventory/"),
                        verbose_name="Photo",
                    ),
                ),
                (
                    "box",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="histories",
                        to="larpmanager.inventorybox",
                    ),
                ),
                (
                    "member",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="box_histories",
                        to="larpmanager.member",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="EventRole",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("number", models.IntegerField()),
                ("name", models.CharField(max_length=150)),
                ("event", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.event")),
                (
                    "permissions",
                    models.ManyToManyField(blank=True, related_name="roles", to="larpmanager.eventpermission"),
                ),
                ("members", models.ManyToManyField(related_name="event_roles", to="larpmanager.member")),
            ],
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Contact",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("channel", models.IntegerField(default=0)),
                ("last_message", models.DateTimeField(auto_now_add=True)),
                ("num_unread", models.IntegerField(default=0)),
                ("assoc", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.association")),
                (
                    "me",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="FIRST_CONTACT",
                        to="larpmanager.member",
                    ),
                ),
                (
                    "you",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="SECOND_CONTACT",
                        to="larpmanager.member",
                    ),
                ),
            ],
            options={
                "ordering": ["me", "you"],
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="CompetenceMemberRel",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("exp", models.IntegerField(default=0)),
                ("info", models.TextField(max_length=5000)),
                (
                    "competence",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.competence"),
                ),
                ("member", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.member")),
            ],
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.AddField(
            model_name="competence",
            name="members",
            field=models.ManyToManyField(
                related_name="competences", through="larpmanager.CompetenceMemberRel", to="larpmanager.member"
            ),
        ),
        migrations.CreateModel(
            name="Collection",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=100, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[("o", "Open"), ("d", "Close"), ("p", "Delivered")], default="o", max_length=1
                    ),
                ),
                ("contribute_code", models.CharField(db_index=True, max_length=16, null=True)),
                ("redeem_code", models.CharField(db_index=True, max_length=16, null=True)),
                ("total", models.IntegerField(default=0)),
                ("assoc", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.association")),
                (
                    "member",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="collections_received",
                        to="larpmanager.member",
                    ),
                ),
                (
                    "organizer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="collections_created",
                        to="larpmanager.member",
                    ),
                ),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="ChatMessage",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("message", models.TextField(max_length=1000)),
                ("channel", models.IntegerField(db_index=True)),
                ("assoc", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.association")),
                (
                    "receiver",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="RECEIVER_MSG",
                        to="larpmanager.member",
                    ),
                ),
                (
                    "sender",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="SENDER_MSG", to="larpmanager.member"
                    ),
                ),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.AddField(
            model_name="character",
            name="assigned",
            field=models.ForeignKey(
                blank=True,
                help_text="Assigned staff member",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="larpmanager.member",
            ),
        ),
        migrations.AddField(
            model_name="character",
            name="player",
            field=models.ForeignKey(
                blank=True,
                help_text="Player",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="characters_player",
                to="larpmanager.member",
            ),
        ),
        migrations.CreateModel(
            name="Badge",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(help_text="Short name", max_length=100, verbose_name="Name")),
                (
                    "name_eng",
                    models.CharField(
                        help_text="Short name - international", max_length=100, verbose_name="Name - international"
                    ),
                ),
                (
                    "descr",
                    models.CharField(help_text="Extended description", max_length=500, verbose_name="Description"),
                ),
                (
                    "descr_eng",
                    models.CharField(
                        help_text="Extended description - international",
                        max_length=500,
                        verbose_name="Description - international",
                    ),
                ),
                ("number", models.IntegerField(default=1)),
                (
                    "cod",
                    models.CharField(
                        help_text="Unique code for internal use - not visible. Indicate a string without spaces or strange symbols.",
                        max_length=30,
                        verbose_name="Code",
                    ),
                ),
                ("img", models.ImageField(upload_to=larpmanager.models.utils.UploadToPathAndRename("badge/"))),
                ("assoc", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.association")),
                ("members", models.ManyToManyField(blank=True, related_name="badges", to="larpmanager.member")),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="AssocRole",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=100)),
                ("number", models.IntegerField()),
                (
                    "assoc",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="roles",
                        to="larpmanager.association",
                    ),
                ),
                (
                    "permissions",
                    models.ManyToManyField(blank=True, related_name="assoc_roles", to="larpmanager.assocpermission"),
                ),
                ("members", models.ManyToManyField(related_name="assoc_roles", to="larpmanager.member")),
            ],
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Membership",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("compiled", models.BooleanField(default=False)),
                ("credit", models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ("tokens", models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("e", "Absent"),
                            ("j", "Shared"),
                            ("u", "Uploaded"),
                            ("s", "Submitted"),
                            ("a", "Accepted"),
                            ("r", "Kicked out"),
                        ],
                        db_index=True,
                        default="e",
                        max_length=1,
                    ),
                ),
                (
                    "request",
                    models.FileField(
                        blank=True, null=True, upload_to=larpmanager.models.utils.UploadToPathAndRename("request/")
                    ),
                ),
                (
                    "document",
                    models.FileField(
                        blank=True, null=True, upload_to=larpmanager.models.utils.UploadToPathAndRename("document/")
                    ),
                ),
                ("card_number", models.IntegerField(blank=True, null=True)),
                ("date", models.DateField(blank=True, null=True)),
                ("password_reset", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "newsletter",
                    models.CharField(
                        choices=[
                            ("a", "Yes, keep me posted!"),
                            ("o", "Only really important communications."),
                            ("n", "No, I don't want updates."),
                        ],
                        default="a",
                        help_text="Do you wish to be always updated on our events?",
                        max_length=1,
                        verbose_name="Newsletter",
                    ),
                ),
                (
                    "assoc",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="memberships",
                        to="larpmanager.association",
                    ),
                ),
                (
                    "member",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="memberships", to="larpmanager.member"
                    ),
                ),
            ],
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="PaymentInvoice",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("search", models.CharField(editable=False, max_length=500)),
                (
                    "typ",
                    models.CharField(
                        choices=[("r", "registration"), ("m", "membership"), ("d", "donation"), ("g", "collection")],
                        max_length=1,
                    ),
                ),
                (
                    "invoice",
                    models.FileField(
                        blank=True,
                        help_text="Statement issued by the bank as proof of the issuance of the transfer (as pdf file)",
                        null=True,
                        upload_to=larpmanager.models.utils.UploadToPathAndRename("wire/"),
                        verbose_name="Statement",
                    ),
                ),
                ("text", models.TextField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[("r", "Created"), ("s", "Submitted"), ("c", "Confirmed"), ("k", "Checked")],
                        db_index=True,
                        default="r",
                        max_length=1,
                    ),
                ),
                (
                    "mc_gross",
                    models.DecimalField(
                        decimal_places=2, help_text="Total payment sent", max_digits=10, null=True, verbose_name="Gross"
                    ),
                ),
                (
                    "mc_fee",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Withheld as transaction fee",
                        max_digits=10,
                        null=True,
                        verbose_name="Transactions",
                    ),
                ),
                ("idx", models.IntegerField(default=0)),
                ("txn_id", models.CharField(blank=True, max_length=50, null=True)),
                ("causal", models.CharField(max_length=200)),
                ("cod", models.CharField(db_index=True, max_length=50, unique=True)),
                ("verified", models.BooleanField(default=False)),
                ("hide", models.BooleanField(default=False)),
                ("key", models.CharField(max_length=500, null=True)),
                ("assoc", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.association")),
                ("member", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.member")),
                (
                    "method",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.paymentmethod"),
                ),
            ],
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="ElectronicInvoice",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("progressive", models.IntegerField()),
                ("number", models.IntegerField()),
                ("year", models.IntegerField()),
                ("xml", models.TextField(blank=True, null=True)),
                ("response", models.TextField(blank=True, null=True)),
                ("assoc", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.association")),
                (
                    "inv",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="electronicinvoice",
                        to="larpmanager.paymentinvoice",
                    ),
                ),
            ],
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="AccountingItemMembership",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("search", models.CharField(editable=False, max_length=150)),
                ("value", models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ("hide", models.BooleanField(default=False)),
                ("year", models.IntegerField()),
                ("assoc", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.association")),
                (
                    "member",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="larpmanager.member"
                    ),
                ),
                (
                    "inv",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="larpmanager.paymentinvoice",
                    ),
                ),
            ],
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="AccountingItemDonation",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("search", models.CharField(editable=False, max_length=150)),
                ("value", models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ("hide", models.BooleanField(default=False)),
                ("descr", models.CharField(max_length=1000)),
                ("assoc", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.association")),
                (
                    "member",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="larpmanager.member"
                    ),
                ),
                (
                    "inv",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="larpmanager.paymentinvoice",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="AccountingItemCollection",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("search", models.CharField(editable=False, max_length=150)),
                ("value", models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ("hide", models.BooleanField(default=False)),
                ("assoc", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.association")),
                (
                    "collection",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="collection_gifts",
                        to="larpmanager.collection",
                    ),
                ),
                (
                    "member",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="larpmanager.member"
                    ),
                ),
                (
                    "inv",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="larpmanager.paymentinvoice",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.AddField(
            model_name="association",
            name="payment_methods",
            field=models.ManyToManyField(
                blank=True,
                help_text="Indicate the payment methods you wish to be available to players",
                related_name="associations_payments",
                to="larpmanager.paymentmethod",
                verbose_name="Payment Methods",
            ),
        ),
        migrations.CreateModel(
            name="Plot",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("number", models.IntegerField()),
                ("name", models.CharField(max_length=150)),
                (
                    "concept",
                    models.TextField(
                        blank=True, help_text="Concept for internal use only. Will not be published", max_length=5000
                    ),
                ),
                (
                    "teaser",
                    tinymce.models.HTMLField(
                        blank=True,
                        help_text="Presentation visible to all players, when 'show presentation' is checked",
                        max_length=10000,
                        verbose_name="Presentation",
                    ),
                ),
                (
                    "text",
                    tinymce.models.HTMLField(
                        blank=True,
                        help_text="Text visible only by the assigned player, when 'show text' is checked",
                        max_length=100000,
                    ),
                ),
                (
                    "preview",
                    tinymce.models.HTMLField(
                        blank=True,
                        help_text="Preview visible only by the assigned player, when 'show preview' is checked",
                        max_length=10000,
                    ),
                ),
                ("temp", models.BooleanField(default=False)),
                ("hide", models.BooleanField(default=False)),
                ("props", models.CharField(blank=True, help_text="Does it require special props?", max_length=500)),
                (
                    "assigned",
                    models.ForeignKey(
                        blank=True,
                        help_text="Assigned staff member",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="larpmanager.member",
                    ),
                ),
                ("event", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.event")),
            ],
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="PlotCharacterRel",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("text", models.TextField(max_length=5000, null=True)),
                (
                    "character",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.character"),
                ),
                ("plot", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.plot")),
            ],
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.AddField(
            model_name="plot",
            name="characters",
            field=models.ManyToManyField(
                blank=True, related_name="plots", through="larpmanager.PlotCharacterRel", to="larpmanager.character"
            ),
        ),
        migrations.CreateModel(
            name="PreRegistration",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("pref", models.IntegerField()),
                ("info", models.CharField(max_length=255)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pre_registrations",
                        to="larpmanager.event",
                    ),
                ),
                (
                    "member",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pre_registrations",
                        to="larpmanager.member",
                    ),
                ),
            ],
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Problem",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("number", models.IntegerField()),
                (
                    "severity",
                    models.CharField(
                        choices=[("r", "1 - RED"), ("o", "2 - ORANGE"), ("y", "3 - YELLOW"), ("g", "4 - GREEN")],
                        default="g",
                        help_text="Indicate severity: RED (risks ruining the game for more than half of the players), ORANGE (risks ruining the game for more than ten players),  YELLOW (risks ruining the game for a few players), GREEN (more than  problems, finesses to be fixed)",
                        max_length=1,
                        verbose_name="Severity",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("o", "1 - OPEN"), ("w", "2 - WORKING"), ("c", "3 - CLOSED")],
                        db_index=True,
                        default="o",
                        help_text="When putting in WORKING, indicate in the comments the specific actions that  are being performed; when putting in CLOSED, indicate showd in the  comments.",
                        max_length=1,
                        verbose_name="Status",
                    ),
                ),
                (
                    "where",
                    models.TextField(help_text="Describe exactly at which point it occurs.", verbose_name="Where"),
                ),
                ("when", models.TextField(help_text="Describe exactly what condition it is in.", verbose_name="When")),
                (
                    "what",
                    models.TextField(
                        help_text="Describe exactly what risks it poses to the game.", verbose_name="What"
                    ),
                ),
                ("who", models.TextField(help_text="Describe exactly which players are involved.", verbose_name="Who")),
                ("assigned", models.CharField(help_text="Who takes it upon themselves to solve it.", max_length=100)),
                ("comments", models.TextField(blank=True)),
                ("event", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.event")),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="ProgressStep",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("number", models.IntegerField()),
                ("name", models.CharField(max_length=150)),
                ("order", models.IntegerField(default=0)),
                ("event", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.event")),
            ],
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.AddField(
            model_name="plot",
            name="progress",
            field=models.ForeignKey(
                blank=True,
                help_text="Progress status",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="larpmanager.progressstep",
            ),
        ),
        migrations.CreateModel(
            name="Handout",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("number", models.IntegerField()),
                ("name", models.CharField(max_length=150)),
                (
                    "concept",
                    models.TextField(
                        blank=True, help_text="Concept for internal use only. Will not be published", max_length=5000
                    ),
                ),
                (
                    "teaser",
                    tinymce.models.HTMLField(
                        blank=True,
                        help_text="Presentation visible to all players, when 'show presentation' is checked",
                        max_length=10000,
                        verbose_name="Presentation",
                    ),
                ),
                (
                    "text",
                    tinymce.models.HTMLField(
                        blank=True,
                        help_text="Text visible only by the assigned player, when 'show text' is checked",
                        max_length=100000,
                    ),
                ),
                (
                    "preview",
                    tinymce.models.HTMLField(
                        blank=True,
                        help_text="Preview visible only by the assigned player, when 'show preview' is checked",
                        max_length=10000,
                    ),
                ),
                ("temp", models.BooleanField(default=False)),
                ("hide", models.BooleanField(default=False)),
                ("props", models.CharField(blank=True, help_text="Does it require special props?", max_length=500)),
                ("cod", models.SlugField(default=larpmanager.models.utils.my_uuid, max_length=32, unique=True)),
                ("event", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.event")),
                (
                    "template",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="handouts",
                        to="larpmanager.handouttemplate",
                    ),
                ),
                (
                    "assigned",
                    models.ForeignKey(
                        blank=True,
                        help_text="Assigned staff member",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="larpmanager.member",
                    ),
                ),
                (
                    "progress",
                    models.ForeignKey(
                        blank=True,
                        help_text="Progress status",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="larpmanager.progressstep",
                    ),
                ),
            ],
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Faction",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("number", models.IntegerField()),
                ("name", models.CharField(max_length=150)),
                (
                    "concept",
                    models.TextField(
                        blank=True, help_text="Concept for internal use only. Will not be published", max_length=5000
                    ),
                ),
                (
                    "teaser",
                    tinymce.models.HTMLField(
                        blank=True,
                        help_text="Presentation visible to all players, when 'show presentation' is checked",
                        max_length=10000,
                        verbose_name="Presentation",
                    ),
                ),
                (
                    "text",
                    tinymce.models.HTMLField(
                        blank=True,
                        help_text="Text visible only by the assigned player, when 'show text' is checked",
                        max_length=100000,
                    ),
                ),
                (
                    "preview",
                    tinymce.models.HTMLField(
                        blank=True,
                        help_text="Preview visible only by the assigned player, when 'show preview' is checked",
                        max_length=10000,
                    ),
                ),
                ("temp", models.BooleanField(default=False)),
                ("hide", models.BooleanField(default=False)),
                ("props", models.CharField(blank=True, help_text="Does it require special props?", max_length=500)),
                (
                    "typ",
                    models.CharField(
                        choices=[("s", "Primary"), ("t", "Transversal"), ("g", "Secret")], default="s", max_length=1
                    ),
                ),
                ("order", models.IntegerField(default=0, help_text="Display order")),
                (
                    "cover",
                    models.ImageField(
                        blank=True,
                        help_text="Faction logo",
                        max_length=500,
                        null=True,
                        upload_to=larpmanager.models.utils.UploadToPathAndRename("faction/cover/"),
                        verbose_name="Faction cover",
                    ),
                ),
                (
                    "selectable",
                    models.BooleanField(default=False, help_text="Indicates whether it can be selected by players"),
                ),
                (
                    "characters",
                    models.ManyToManyField(blank=True, related_name="factions_list", to="larpmanager.character"),
                ),
                ("event", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.event")),
                (
                    "assigned",
                    models.ForeignKey(
                        blank=True,
                        help_text="Assigned staff member",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="larpmanager.member",
                    ),
                ),
                (
                    "progress",
                    models.ForeignKey(
                        blank=True,
                        help_text="Progress status",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="larpmanager.progressstep",
                    ),
                ),
            ],
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.AddField(
            model_name="character",
            name="progress",
            field=models.ForeignKey(
                blank=True,
                help_text="Progress status",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="larpmanager.progressstep",
            ),
        ),
        migrations.CreateModel(
            name="PrologueType",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("number", models.IntegerField()),
                ("name", models.CharField(max_length=150)),
                (
                    "concept",
                    models.TextField(
                        blank=True, help_text="Concept for internal use only. Will not be published", max_length=5000
                    ),
                ),
                (
                    "teaser",
                    tinymce.models.HTMLField(
                        blank=True,
                        help_text="Presentation visible to all players, when 'show presentation' is checked",
                        max_length=10000,
                        verbose_name="Presentation",
                    ),
                ),
                (
                    "text",
                    tinymce.models.HTMLField(
                        blank=True,
                        help_text="Text visible only by the assigned player, when 'show text' is checked",
                        max_length=100000,
                    ),
                ),
                (
                    "preview",
                    tinymce.models.HTMLField(
                        blank=True,
                        help_text="Preview visible only by the assigned player, when 'show preview' is checked",
                        max_length=10000,
                    ),
                ),
                ("temp", models.BooleanField(default=False)),
                ("hide", models.BooleanField(default=False)),
                ("props", models.CharField(blank=True, help_text="Does it require special props?", max_length=500)),
                (
                    "assigned",
                    models.ForeignKey(
                        blank=True,
                        help_text="Assigned staff member",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="larpmanager.member",
                    ),
                ),
                ("event", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.event")),
                (
                    "progress",
                    models.ForeignKey(
                        blank=True,
                        help_text="Progress status",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="larpmanager.progressstep",
                    ),
                ),
            ],
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Prologue",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("number", models.IntegerField()),
                ("name", models.CharField(max_length=150)),
                (
                    "concept",
                    models.TextField(
                        blank=True, help_text="Concept for internal use only. Will not be published", max_length=5000
                    ),
                ),
                (
                    "teaser",
                    tinymce.models.HTMLField(
                        blank=True,
                        help_text="Presentation visible to all players, when 'show presentation' is checked",
                        max_length=10000,
                        verbose_name="Presentation",
                    ),
                ),
                (
                    "text",
                    tinymce.models.HTMLField(
                        blank=True,
                        help_text="Text visible only by the assigned player, when 'show text' is checked",
                        max_length=100000,
                    ),
                ),
                (
                    "preview",
                    tinymce.models.HTMLField(
                        blank=True,
                        help_text="Preview visible only by the assigned player, when 'show preview' is checked",
                        max_length=10000,
                    ),
                ),
                ("temp", models.BooleanField(default=False)),
                ("hide", models.BooleanField(default=False)),
                ("props", models.CharField(blank=True, help_text="Does it require special props?", max_length=500)),
                (
                    "assigned",
                    models.ForeignKey(
                        blank=True,
                        help_text="Assigned staff member",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="larpmanager.member",
                    ),
                ),
                (
                    "characters",
                    models.ManyToManyField(blank=True, related_name="prologues_list", to="larpmanager.character"),
                ),
                ("event", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.event")),
                (
                    "progress",
                    models.ForeignKey(
                        blank=True,
                        help_text="Progress status",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="larpmanager.progressstep",
                    ),
                ),
                (
                    "typ",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="prologues",
                        to="larpmanager.prologuetype",
                    ),
                ),
            ],
            options={
                "ordering": ("event", "number", "typ"),
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="QuestType",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("number", models.IntegerField()),
                ("name", models.CharField(max_length=150)),
                (
                    "concept",
                    models.TextField(
                        blank=True, help_text="Concept for internal use only. Will not be published", max_length=5000
                    ),
                ),
                (
                    "teaser",
                    tinymce.models.HTMLField(
                        blank=True,
                        help_text="Presentation visible to all players, when 'show presentation' is checked",
                        max_length=10000,
                        verbose_name="Presentation",
                    ),
                ),
                (
                    "text",
                    tinymce.models.HTMLField(
                        blank=True,
                        help_text="Text visible only by the assigned player, when 'show text' is checked",
                        max_length=100000,
                    ),
                ),
                (
                    "preview",
                    tinymce.models.HTMLField(
                        blank=True,
                        help_text="Preview visible only by the assigned player, when 'show preview' is checked",
                        max_length=10000,
                    ),
                ),
                ("temp", models.BooleanField(default=False)),
                ("hide", models.BooleanField(default=False)),
                ("props", models.CharField(blank=True, help_text="Does it require special props?", max_length=500)),
                (
                    "assigned",
                    models.ForeignKey(
                        blank=True,
                        help_text="Assigned staff member",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="larpmanager.member",
                    ),
                ),
                ("event", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.event")),
                (
                    "progress",
                    models.ForeignKey(
                        blank=True,
                        help_text="Progress status",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="larpmanager.progressstep",
                    ),
                ),
            ],
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Quest",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("number", models.IntegerField()),
                ("name", models.CharField(max_length=150)),
                (
                    "concept",
                    models.TextField(
                        blank=True, help_text="Concept for internal use only. Will not be published", max_length=5000
                    ),
                ),
                (
                    "teaser",
                    tinymce.models.HTMLField(
                        blank=True,
                        help_text="Presentation visible to all players, when 'show presentation' is checked",
                        max_length=10000,
                        verbose_name="Presentation",
                    ),
                ),
                (
                    "text",
                    tinymce.models.HTMLField(
                        blank=True,
                        help_text="Text visible only by the assigned player, when 'show text' is checked",
                        max_length=100000,
                    ),
                ),
                (
                    "preview",
                    tinymce.models.HTMLField(
                        blank=True,
                        help_text="Preview visible only by the assigned player, when 'show preview' is checked",
                        max_length=10000,
                    ),
                ),
                ("temp", models.BooleanField(default=False)),
                ("hide", models.BooleanField(default=False)),
                ("props", models.CharField(blank=True, help_text="Does it require special props?", max_length=500)),
                ("open_show", models.BooleanField(default=False, help_text="Show all the traits to those present?")),
                (
                    "assigned",
                    models.ForeignKey(
                        blank=True,
                        help_text="Assigned staff member",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="larpmanager.member",
                    ),
                ),
                ("event", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.event")),
                (
                    "progress",
                    models.ForeignKey(
                        blank=True,
                        help_text="Progress status",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="larpmanager.progressstep",
                    ),
                ),
                (
                    "typ",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="quests",
                        to="larpmanager.questtype",
                    ),
                ),
            ],
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="RefundRequest",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("search", models.CharField(editable=False, max_length=200)),
                (
                    "status",
                    models.CharField(
                        choices=[("r", "Request"), ("p", "Delivered")], db_index=True, default="r", max_length=1
                    ),
                ),
                (
                    "details",
                    models.TextField(
                        help_text="Indicate all references of how you want your refund to be paid  (ex: IBAN and full bank details, paypal link, etc)",
                        max_length=2000,
                        verbose_name="Details",
                    ),
                ),
                (
                    "value",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Indicates the amount of reimbursement desired",
                        max_digits=10,
                        verbose_name="Refund",
                    ),
                ),
                ("hide", models.BooleanField(default=False)),
                ("assoc", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.association")),
                (
                    "member",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="refund_requests",
                        to="larpmanager.member",
                    ),
                ),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Registration",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("search", models.CharField(editable=False, max_length=150)),
                ("quotas", models.IntegerField(default=1)),
                ("additionals", models.IntegerField(default=0)),
                ("pay_what", models.IntegerField(default=0)),
                (
                    "info",
                    models.TextField(
                        blank=True,
                        help_text="Write here additional information to your registration",
                        max_length=500,
                        null=True,
                        verbose_name="More information",
                    ),
                ),
                ("num_payments", models.IntegerField(default=1)),
                ("tot_payed", models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ("tot_iscr", models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ("quota", models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ("alert", models.BooleanField(default=False)),
                ("deadline", models.IntegerField(default=0)),
                ("cancellation_date", models.DateTimeField(blank=True, null=True)),
                ("surcharge", models.IntegerField(default=0)),
                ("refunded", models.BooleanField(default=False)),
                ("modified", models.IntegerField(default=0)),
                (
                    "special_cod",
                    models.CharField(
                        db_index=True,
                        default=larpmanager.models.utils.my_uuid_short,
                        max_length=12,
                        unique=True,
                        verbose_name="Unique code",
                    ),
                ),
                ("redeem_code", models.CharField(blank=True, max_length=16, null=True)),
                (
                    "member",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="registrations",
                        to="larpmanager.member",
                    ),
                ),
            ],
            options={
                "ordering": ["-created"],
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="PlayerRelationship",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("text", tinymce.models.HTMLField(max_length=5000)),
                (
                    "target",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="target_players",
                        to="larpmanager.character",
                    ),
                ),
                ("reg", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.registration")),
            ],
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.AddField(
            model_name="paymentinvoice",
            name="reg",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="invoices",
                to="larpmanager.registration",
            ),
        ),
        migrations.CreateModel(
            name="AccountingItemTransaction",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("search", models.CharField(editable=False, max_length=150)),
                ("value", models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ("hide", models.BooleanField(default=False)),
                ("user_burden", models.BooleanField(default=False)),
                ("assoc", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.association")),
                (
                    "member",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="larpmanager.member"
                    ),
                ),
                (
                    "inv",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="larpmanager.paymentinvoice",
                    ),
                ),
                (
                    "reg",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="accounting_items_t",
                        to="larpmanager.registration",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="AccountingItemPayment",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("search", models.CharField(editable=False, max_length=150)),
                ("value", models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ("hide", models.BooleanField(default=False)),
                (
                    "pay",
                    models.CharField(
                        choices=[("a", "Money"), ("b", "Credit"), ("c", "Token")], default="a", max_length=1
                    ),
                ),
                ("info", models.CharField(blank=True, max_length=150, null=True)),
                ("vat", models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ("assoc", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.association")),
                (
                    "member",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="larpmanager.member"
                    ),
                ),
                (
                    "inv",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="larpmanager.paymentinvoice",
                    ),
                ),
                (
                    "reg",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="accounting_items_p",
                        to="larpmanager.registration",
                    ),
                ),
            ],
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="RegistrationCharacterRel",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "custom_name",
                    models.CharField(
                        blank=True,
                        help_text="Specify your custom character name (depending on the event you can choose the name, or adapt the name to your chosen gender)",
                        max_length=150,
                        null=True,
                        verbose_name="Character name",
                    ),
                ),
                (
                    "custom_pronoun",
                    models.CharField(
                        blank=True,
                        help_text="If you wish, indicate a pronoun for your character",
                        max_length=15,
                        null=True,
                        verbose_name="Pronoun",
                    ),
                ),
                (
                    "custom_song",
                    models.URLField(
                        blank=True,
                        help_text="Indicate a song you want to dedicate to your character",
                        max_length=100,
                        null=True,
                        verbose_name="Song",
                    ),
                ),
                (
                    "custom_public",
                    models.TextField(
                        blank=True,
                        help_text="Indicates public information about your character, which will be shown to all other players",
                        max_length=5000,
                        null=True,
                        verbose_name="Public",
                    ),
                ),
                (
                    "custom_private",
                    models.TextField(
                        blank=True,
                        help_text="Indicates public information about your character, which will be shown only to you and the organizers",
                        max_length=5000,
                        null=True,
                        verbose_name="Private",
                    ),
                ),
                (
                    "custom_profile",
                    models.ImageField(
                        blank=True,
                        help_text="Optional: upload a photo of yourself associated with your character specifically for this event!",
                        max_length=500,
                        null=True,
                        upload_to=larpmanager.models.utils.UploadToPathAndRename("registration/"),
                        verbose_name="Character portrait",
                    ),
                ),
                (
                    "character",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="rcrs", to="larpmanager.character"
                    ),
                ),
                (
                    "reg",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="rcrs", to="larpmanager.registration"
                    ),
                ),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.AddField(
            model_name="registration",
            name="characters",
            field=models.ManyToManyField(
                blank=True,
                related_name="multi_registrations",
                through="larpmanager.RegistrationCharacterRel",
                to="larpmanager.character",
            ),
        ),
        migrations.CreateModel(
            name="RegistrationQuestion",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "typ",
                    models.CharField(
                        choices=[
                            ("s", "Single choice"),
                            ("m", "Multiple choice"),
                            ("t", "Text (short)"),
                            ("p", "Text (long)"),
                            ("name", "Name"),
                            ("teaser", "Presentation"),
                            ("text", "Sheet"),
                            ("concept", "Concept"),
                            ("cover", "Cover"),
                            ("faction", "Factions"),
                            ("title", "Title"),
                            ("mirror", "Mirror"),
                            ("props", "Prop"),
                            ("role", "Role"),
                            ("gender", "Gender"),
                            ("special", "Special"),
                            ("hide", "Hide"),
                            ("keywords", "Keywords"),
                            ("safety", "Safety"),
                            ("progress", "Progress"),
                            ("assigned", "Assigned"),
                        ],
                        default="s",
                        help_text="Question type",
                        max_length=10,
                        verbose_name="Type",
                    ),
                ),
                ("search", models.CharField(editable=False, max_length=1000)),
                (
                    "display",
                    models.CharField(help_text="Question display text", max_length=100, verbose_name="Display"),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        help_text="Extended description (will be shown in gray, in small)",
                        max_length=1000,
                        verbose_name="Description",
                    ),
                ),
                ("order", models.IntegerField(default=0, help_text="Display order with respect to all questions")),
                (
                    "status",
                    models.CharField(
                        choices=[("o", "Optional"), ("m", "Mandatory"), ("d", "Disabled"), ("h", "Hidden")],
                        default="o",
                        help_text="Question status",
                        max_length=1,
                        verbose_name="Status",
                    ),
                ),
                (
                    "max_length",
                    models.IntegerField(
                        default=0,
                        help_text="For text questions, maximum number of characters; For multiple options, maximum number of options (0 = no limit)",
                        verbose_name="Maximum length",
                    ),
                ),
                (
                    "profile",
                    models.ImageField(
                        blank=True,
                        help_text="(Optional) an image that will be shown inside the question",
                        max_length=500,
                        null=True,
                        upload_to=larpmanager.models.utils.UploadToPathAndRename("reg_questions/"),
                        verbose_name="Image",
                    ),
                ),
                (
                    "giftable",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates whether the option can be included in the gifted signups",
                        verbose_name="Giftable",
                    ),
                ),
                (
                    "allowed",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Staff members who are allowed to be able to see the responses of players (leave blank to let everyone see)",
                        related_name="questions_allowed",
                        to="larpmanager.member",
                        verbose_name="Allowed",
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="questions", to="larpmanager.event"
                    ),
                ),
                (
                    "factions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="If you select one (or more) factions, the question will only be shown to players with characters in all chosen factions",
                        related_name="registration_questions",
                        to="larpmanager.faction",
                        verbose_name="Faction list",
                    ),
                ),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="RegistrationOption",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("search", models.CharField(editable=False, max_length=1000)),
                ("display", models.CharField(max_length=170)),
                (
                    "details",
                    models.CharField(
                        blank=True,
                        help_text="Optional - Indicates additional details on the option, will be shown below the question",
                        max_length=500,
                        null=True,
                        verbose_name="Description",
                    ),
                ),
                ("price", models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                (
                    "max_available",
                    models.IntegerField(
                        default=0,
                        help_text="Indicates the maximum number of times it can be requested (0 for infinite)",
                        verbose_name="Maximum number",
                    ),
                ),
                (
                    "order",
                    models.IntegerField(
                        default=0, help_text="Order in which the option is shown with respect to the others"
                    ),
                ),
                ("price_staff", models.IntegerField(default=0)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="options", to="larpmanager.event"
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="options",
                        to="larpmanager.registrationquestion",
                    ),
                ),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="RegistrationChoice",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "reg",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="choices",
                        to="larpmanager.registration",
                    ),
                ),
                (
                    "option",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="choices",
                        to="larpmanager.registrationoption",
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="choices",
                        to="larpmanager.registrationquestion",
                    ),
                ),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="RegistrationAnswer",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("text", models.TextField(max_length=5000)),
                (
                    "reg",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="answers",
                        to="larpmanager.registration",
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="answers",
                        to="larpmanager.registrationquestion",
                    ),
                ),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="RegistrationQuota",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("number", models.IntegerField()),
                ("quotas", models.IntegerField(help_text="Quotas total number")),
                (
                    "days_available",
                    models.IntegerField(
                        help_text="Minimum number of days before the event for which it is made available (0  = always)"
                    ),
                ),
                ("surcharge", models.IntegerField(default=0)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="quotas", to="larpmanager.event"
                    ),
                ),
            ],
            options={
                "ordering": ["-created"],
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="RegistrationSection",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("search", models.CharField(editable=False, max_length=1000)),
                ("name", models.CharField(help_text="Text", max_length=100)),
                (
                    "description",
                    tinymce.models.HTMLField(
                        blank=True,
                        help_text="Description - will be displayed at the beginning of the section",
                        max_length=5000,
                        null=True,
                    ),
                ),
                ("order", models.IntegerField(default=0, help_text="Display order with respect to all sections")),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="sections", to="larpmanager.event"
                    ),
                ),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.AddField(
            model_name="registrationquestion",
            name="section",
            field=models.ForeignKey(
                blank=True,
                help_text="The question will be shown in the selected section (if left empty it will shown at the start of the form)",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="questions",
                to="larpmanager.registrationsection",
                verbose_name="Section",
            ),
        ),
        migrations.CreateModel(
            name="RegistrationSurcharge",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("number", models.IntegerField()),
                ("amount", models.IntegerField(help_text="Surcharge applied to the ticket")),
                ("date", models.DateField(help_text="Date from when the surcharge is applied")),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="surcharges", to="larpmanager.event"
                    ),
                ),
            ],
            options={
                "ordering": ["-created"],
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="RegistrationTicket",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("search", models.CharField(editable=False, max_length=150)),
                ("number", models.IntegerField()),
                (
                    "tier",
                    models.CharField(
                        choices=[
                            ("l", "Lottery"),
                            ("f", "Filler"),
                            ("b", "Standard"),
                            ("w", "Waiting"),
                            ("t", "Staff"),
                            ("r", "Reduced"),
                            ("p", "Patron"),
                        ],
                        default="b",
                        help_text="Type of ticket",
                        max_length=1,
                    ),
                ),
                ("name", models.CharField(help_text="Name", max_length=50)),
                (
                    "details",
                    models.CharField(
                        blank=True,
                        help_text="Optional - Indicate additional details on the ticket, they will be shown below the application",
                        max_length=500,
                        null=True,
                        verbose_name="Description",
                    ),
                ),
                ("price", models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                (
                    "max_available",
                    models.IntegerField(default=0, help_text="Maximum number of tickets available (0 for infinite)"),
                ),
                ("visible", models.BooleanField(default=True, help_text="Is it selectable by players?")),
                (
                    "casting_priority",
                    models.IntegerField(
                        default=1,
                        help_text="What casting priority does it ensure? (Usually: 1 is the subsized, 5 for default, 25 for patron)",
                    ),
                ),
                (
                    "giftable",
                    models.BooleanField(
                        default=False, help_text="Indicates whether the ticket can be selected in the free entries"
                    ),
                ),
                ("order", models.IntegerField(default=0, help_text="Display order with respect to all questions")),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="tickets", to="larpmanager.event"
                    ),
                ),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.AddField(
            model_name="registrationquestion",
            name="tickets",
            field=models.ManyToManyField(
                blank=True,
                help_text="If you select one (or more) tickets, the question will only be shown to players who have selected one of those tickets",
                related_name="registration_tickets",
                to="larpmanager.registrationticket",
                verbose_name="Ticket list",
            ),
        ),
        migrations.CreateModel(
            name="RegistrationInstallment",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("number", models.IntegerField()),
                ("order", models.IntegerField(help_text="Payment order")),
                (
                    "amount",
                    models.IntegerField(
                        help_text="Total amount of payment to be received by this date (0 = all outstanding)"
                    ),
                ),
                (
                    "days_deadline",
                    models.IntegerField(
                        blank=True,
                        help_text="Deadline in the measure of days from enrollment (fill in one between the fixed deadline and the deadline in days)",
                        null=True,
                    ),
                ),
                ("date_deadline", models.DateField(blank=True, help_text="Deadline date", null=True)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="installments", to="larpmanager.event"
                    ),
                ),
                (
                    "tickets",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Indicate the tickets for which it is active",
                        related_name="installments",
                        to="larpmanager.registrationticket",
                    ),
                ),
            ],
            options={
                "ordering": ["-created"],
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.AddField(
            model_name="registration",
            name="ticket",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="registrations",
                to="larpmanager.registrationticket",
            ),
        ),
        migrations.AddField(
            model_name="characteroption",
            name="tickets",
            field=models.ManyToManyField(
                blank=True,
                help_text="If you select one (or more) tickets, the option will only be available to players who have selected that ticket",
                related_name="character_options",
                to="larpmanager.registrationticket",
            ),
        ),
        migrations.CreateModel(
            name="Relationship",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("text", tinymce.models.HTMLField(max_length=5000)),
                (
                    "source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="source", to="larpmanager.character"
                    ),
                ),
                (
                    "target",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="target", to="larpmanager.character"
                    ),
                ),
            ],
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.AddField(
            model_name="character",
            name="characters",
            field=models.ManyToManyField(
                blank=True,
                related_name="characters_inv",
                through="larpmanager.Relationship",
                to="larpmanager.character",
            ),
        ),
        migrations.CreateModel(
            name="Run",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("search", models.CharField(editable=False, max_length=150)),
                (
                    "development",
                    models.CharField(
                        choices=[("0", "Hidden"), ("1", "Visible"), ("8", "Cancelled"), ("9", "Concluded")],
                        default="0",
                        max_length=1,
                        verbose_name="Status",
                    ),
                ),
                ("number", models.IntegerField(help_text="Number of event run")),
                (
                    "start",
                    models.DateField(
                        blank=True,
                        help_text="Indicates the date on which the run starts",
                        null=True,
                        verbose_name="Start date",
                    ),
                ),
                (
                    "end",
                    models.DateField(
                        blank=True,
                        help_text="Indicates the date on which the run ends",
                        null=True,
                        verbose_name="End date",
                    ),
                ),
                (
                    "registration_open",
                    models.DateTimeField(
                        blank=True,
                        help_text="Indicate the date when registration opens. Leave blank to not open registrations",
                        null=True,
                        verbose_name="Registration opening date",
                    ),
                ),
                (
                    "registration_secret",
                    models.CharField(
                        db_index=True,
                        default=larpmanager.models.utils.my_uuid_short,
                        help_text="This code will be used to generate the secret registration links. You can leave it as it is or customise it",
                        max_length=12,
                        unique=True,
                        verbose_name="Registration code",
                    ),
                ),
                ("balance", models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ("paid", models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                (
                    "plan",
                    models.CharField(blank=True, choices=[("f", "Free"), ("p", "Support")], max_length=1, null=True),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="runs", to="larpmanager.event"
                    ),
                ),
            ],
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.AddField(
            model_name="registration",
            name="run",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="registrations", to="larpmanager.run"
            ),
        ),
        migrations.CreateModel(
            name="RecordAccounting",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "global_sum",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name="Global balance"),
                ),
                (
                    "bank_sum",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name="Overall balance"),
                ),
                (
                    "assoc",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rec_accs",
                        to="larpmanager.association",
                    ),
                ),
                (
                    "run",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rec_accs",
                        to="larpmanager.run",
                    ),
                ),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="HelpQuestion",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("is_user", models.BooleanField(default=True)),
                (
                    "text",
                    models.TextField(
                        help_text="Write your question, request or concern here. We will be happy to answer you!",
                        max_length=5000,
                        verbose_name="Text",
                    ),
                ),
                ("closed", models.BooleanField(default=False)),
                (
                    "attachment",
                    models.FileField(
                        blank=True,
                        help_text="If you need to attach a file, indicate it here, otherwise leave blank",
                        null=True,
                        upload_to=larpmanager.models.utils.UploadToPathAndRename("attachment/"),
                        verbose_name="Attachment",
                    ),
                ),
                (
                    "assoc",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.CASCADE, to="larpmanager.association"
                    ),
                ),
                (
                    "member",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="questions", to="larpmanager.member"
                    ),
                ),
                (
                    "run",
                    models.ForeignKey(
                        blank=True,
                        help_text="If your question is about a specific event, please select it! If  is a general question instead, please leave it blank.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="larpmanager.run",
                        verbose_name="Event",
                    ),
                ),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Email",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("recipient", models.CharField(max_length=170)),
                ("subj", models.CharField(max_length=500)),
                ("body", models.TextField()),
                ("reply_to", models.CharField(blank=True, max_length=170, null=True)),
                ("sent", models.DateTimeField(blank=True, null=True)),
                ("search", models.CharField(blank=True, max_length=500)),
                (
                    "assoc",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="larpmanager.association"
                    ),
                ),
                (
                    "run",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="larpmanager.run"
                    ),
                ),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Discount",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(help_text="Name of the discount - internal use", max_length=100)),
                (
                    "value",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Indicate the value of the discount, it will be deducted from the total amount calculated",
                        max_digits=10,
                    ),
                ),
                (
                    "max_redeem",
                    models.IntegerField(
                        help_text="Indicate the maximum number of such discounts that can be requested (0 for infinite uses)"
                    ),
                ),
                (
                    "cod",
                    models.CharField(
                        default=larpmanager.models.utils.my_uuid_short,
                        help_text="Indicate the special discount code, to be communicated to the players, which will need to be entered during registration.",
                        max_length=12,
                        verbose_name="Code",
                    ),
                ),
                (
                    "typ",
                    models.CharField(
                        choices=[("a", "Standard"), ("p", "Play Again")],
                        help_text="Indicate the type of discount: standard, play again (only available to those who have already played a run)",
                        max_length=1,
                        verbose_name="Type",
                    ),
                ),
                (
                    "visible",
                    models.BooleanField(
                        default=False, help_text="Indicates whether the discount is visible and usable by players"
                    ),
                ),
                (
                    "only_reg",
                    models.BooleanField(
                        default=True,
                        help_text="Indicate whether the discount can be used only on new enrollment, or whether it can be used by already registered players.",
                    ),
                ),
                ("number", models.IntegerField()),
                (
                    "event",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="discounts",
                        to="larpmanager.event",
                    ),
                ),
                (
                    "runs",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Indicate the runs for which the discount is active",
                        related_name="discounts",
                        to="larpmanager.run",
                    ),
                ),
            ],
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.AddField(
            model_name="collection",
            name="run",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="collections_runs",
                to="larpmanager.run",
            ),
        ),
        migrations.CreateModel(
            name="CastingAvoid",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("typ", models.IntegerField(default=0)),
                ("text", models.TextField(max_length=5000)),
                (
                    "member",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="casting_avoids",
                        to="larpmanager.member",
                    ),
                ),
                (
                    "run",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="casting_avoids",
                        to="larpmanager.run",
                    ),
                ),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Casting",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("element", models.IntegerField()),
                ("pref", models.IntegerField()),
                ("typ", models.IntegerField(default=0)),
                ("nope", models.BooleanField(default=False)),
                ("active", models.BooleanField(default=True)),
                (
                    "member",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="castings",
                        to="larpmanager.member",
                    ),
                ),
                (
                    "run",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="castings",
                        to="larpmanager.run",
                    ),
                ),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.AddField(
            model_name="album",
            name="run",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="albums",
                to="larpmanager.run",
            ),
        ),
        migrations.CreateModel(
            name="AccountingItemOutflow",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("search", models.CharField(editable=False, max_length=150)),
                ("value", models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ("hide", models.BooleanField(default=False)),
                ("descr", models.CharField(max_length=500, verbose_name="Description")),
                (
                    "invoice",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=larpmanager.models.utils.UploadToPathAndRename("invoice_outflow/"),
                    ),
                ),
                (
                    "payment_date",
                    models.DateField(
                        help_text="Indicate the exact date in which the payment has been performed",
                        null=True,
                        verbose_name="Payment date",
                    ),
                ),
                (
                    "exp",
                    models.CharField(
                        choices=[
                            ("a", "Set design - staging, materials"),
                            ("b", "Costumes - make up, cloth, armor"),
                            ("c", "Prop - weapons, props"),
                            ("d", "Electronics - computers, hitech, lights"),
                            ("e", "Promotion - site, advertising"),
                            ("f", "Transportation - gas, highway"),
                            ("g", "Kitchen - food, tableware"),
                            ("h", "Location - rent, gas, overnight stays"),
                            ("i", "Secretarial - stationery, printing"),
                            ("j", "Other"),
                        ],
                        help_text="Indicate the outflow category",
                        max_length=1,
                        verbose_name="Type",
                    ),
                ),
                (
                    "balance",
                    models.CharField(
                        choices=[
                            ("1", "Raw materials, auxiliaries, consumables and goods"),
                            ("2", "Services"),
                            ("3", "Use of third party assets"),
                            ("4", "Personal"),
                            ("5", "Miscellaneous operating expenses"),
                        ],
                        help_text="Indicate how spending is allocated at the budget level.",
                        max_length=1,
                        null=True,
                        verbose_name="Balance",
                    ),
                ),
                ("assoc", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.association")),
                (
                    "member",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="larpmanager.member"
                    ),
                ),
                (
                    "inv",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="larpmanager.paymentinvoice",
                    ),
                ),
                (
                    "run",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="larpmanager.run"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="AccountingItemOther",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("search", models.CharField(editable=False, max_length=150)),
                ("value", models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ("hide", models.BooleanField(default=False)),
                ("oth", models.CharField(choices=[("c", "Credits"), ("t", "Tokens"), ("r", "Refund")], max_length=1)),
                ("descr", models.CharField(max_length=150)),
                ("cancellation", models.BooleanField(default=False)),
                ("ref_addit", models.IntegerField(blank=True, null=True)),
                ("assoc", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.association")),
                (
                    "member",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="larpmanager.member"
                    ),
                ),
                (
                    "inv",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="larpmanager.paymentinvoice",
                    ),
                ),
                (
                    "run",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="larpmanager.run"
                    ),
                ),
            ],
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="AccountingItemInflow",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("search", models.CharField(editable=False, max_length=150)),
                ("value", models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ("hide", models.BooleanField(default=False)),
                ("descr", models.CharField(max_length=500, verbose_name="Description")),
                (
                    "invoice",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=larpmanager.models.utils.UploadToPathAndRename("invoice_outflow/"),
                    ),
                ),
                (
                    "payment_date",
                    models.DateField(
                        help_text="Indicate the exact date in which the payment has been performed",
                        null=True,
                        verbose_name="Payment date",
                    ),
                ),
                ("assoc", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.association")),
                (
                    "member",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="larpmanager.member"
                    ),
                ),
                (
                    "inv",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="larpmanager.paymentinvoice",
                    ),
                ),
                (
                    "run",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="larpmanager.run"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="AccountingItemExpense",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("search", models.CharField(editable=False, max_length=150)),
                ("value", models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ("hide", models.BooleanField(default=False)),
                ("invoice", models.FileField(upload_to=larpmanager.models.utils.UploadToPathAndRename("invoice/"))),
                ("descr", models.CharField(max_length=150)),
                (
                    "exp",
                    models.CharField(
                        choices=[
                            ("a", "Set design - staging, materials"),
                            ("b", "Costumes - make up, cloth, armor"),
                            ("c", "Prop - weapons, props"),
                            ("d", "Electronics - computers, hitech, lights"),
                            ("e", "Promotion - site, advertising"),
                            ("f", "Transportation - gas, highway"),
                            ("g", "Kitchen - food, tableware"),
                            ("h", "Location - rent, gas, overnight stays"),
                            ("i", "Secretarial - stationery, printing"),
                            ("j", "Other"),
                        ],
                        help_text="Indicate the outflow category",
                        max_length=1,
                        verbose_name="Type",
                    ),
                ),
                (
                    "balance",
                    models.CharField(
                        choices=[
                            ("1", "Raw materials, auxiliaries, consumables and goods"),
                            ("2", "Services"),
                            ("3", "Use of third party assets"),
                            ("4", "Personal"),
                            ("5", "Miscellaneous operating expenses"),
                        ],
                        help_text="Indicate how spending is allocated at the budget level.",
                        max_length=1,
                        null=True,
                        verbose_name="Balance",
                    ),
                ),
                ("is_approved", models.BooleanField(default=False)),
                ("assoc", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.association")),
                (
                    "member",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="larpmanager.member"
                    ),
                ),
                (
                    "inv",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="larpmanager.paymentinvoice",
                    ),
                ),
                (
                    "run",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="larpmanager.run"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="AccountingItemDiscount",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("search", models.CharField(editable=False, max_length=150)),
                ("value", models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ("hide", models.BooleanField(default=False)),
                ("expires", models.DateTimeField(blank=True, null=True)),
                ("detail", models.IntegerField(blank=True, null=True)),
                ("assoc", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.association")),
                (
                    "disc",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="accounting_items",
                        to="larpmanager.discount",
                    ),
                ),
                (
                    "member",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="larpmanager.member"
                    ),
                ),
                (
                    "inv",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="larpmanager.paymentinvoice",
                    ),
                ),
                (
                    "run",
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to="larpmanager.run"),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="RunConfig",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=150)),
                ("value", models.CharField(max_length=1000)),
                (
                    "run",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="configs", to="larpmanager.run"
                    ),
                ),
            ],
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="RunText",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("first", tinymce.models.HTMLField(blank=True, null=True)),
                ("second", tinymce.models.HTMLField(blank=True, null=True)),
                ("eid", models.IntegerField()),
                ("typ", models.CharField(choices=[("c", "Co-creation")], max_length=1)),
                (
                    "run",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="texts", to="larpmanager.run"
                    ),
                ),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="ShuttleService",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "passengers",
                    models.IntegerField(
                        help_text="Indicates how many passengers require transportation",
                        verbose_name="Number of passengers",
                    ),
                ),
                (
                    "address",
                    models.TextField(
                        help_text="Indicate as precisely as possible where to pick you up.", verbose_name="Address"
                    ),
                ),
                (
                    "info",
                    models.TextField(
                        help_text="Indicates how you can be recognized, if you will be found near some point specific, if you have a lot of luggage: any information that might help us help you",
                        verbose_name="Informations",
                    ),
                ),
                (
                    "date",
                    models.DateField(
                        help_text="For which day you will need transportation", verbose_name="Request date"
                    ),
                ),
                (
                    "time",
                    models.TimeField(
                        help_text="For what time you will need transportation (time zone of the larp location)",
                        verbose_name="Request time",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        help_text="Indicates useful information to passengers, such as color of your car, time estimated time of your arrival",
                        null=True,
                        verbose_name="Note",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("0", "Waiting list"), ("1", "We're coming"), ("2", "Arrived safe and sound")],
                        db_index=True,
                        default="0",
                        max_length=1,
                    ),
                ),
                (
                    "assoc",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="shuttles",
                        to="larpmanager.association",
                    ),
                ),
                (
                    "member",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="shuttle_services_requests",
                        to="larpmanager.member",
                    ),
                ),
                (
                    "working",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="shuttle_services_worked",
                        to="larpmanager.member",
                    ),
                ),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="SpeedLarp",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("number", models.IntegerField()),
                ("name", models.CharField(max_length=150)),
                (
                    "concept",
                    models.TextField(
                        blank=True, help_text="Concept for internal use only. Will not be published", max_length=5000
                    ),
                ),
                (
                    "teaser",
                    tinymce.models.HTMLField(
                        blank=True,
                        help_text="Presentation visible to all players, when 'show presentation' is checked",
                        max_length=10000,
                        verbose_name="Presentation",
                    ),
                ),
                (
                    "text",
                    tinymce.models.HTMLField(
                        blank=True,
                        help_text="Text visible only by the assigned player, when 'show text' is checked",
                        max_length=100000,
                    ),
                ),
                (
                    "preview",
                    tinymce.models.HTMLField(
                        blank=True,
                        help_text="Preview visible only by the assigned player, when 'show preview' is checked",
                        max_length=10000,
                    ),
                ),
                ("temp", models.BooleanField(default=False)),
                ("hide", models.BooleanField(default=False)),
                ("props", models.CharField(blank=True, help_text="Does it require special props?", max_length=500)),
                ("typ", models.IntegerField()),
                ("station", models.IntegerField()),
                (
                    "assigned",
                    models.ForeignKey(
                        blank=True,
                        help_text="Assigned staff member",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="larpmanager.member",
                    ),
                ),
                (
                    "characters",
                    models.ManyToManyField(blank=True, related_name="speedlarps_list", to="larpmanager.character"),
                ),
                ("event", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.event")),
                (
                    "progress",
                    models.ForeignKey(
                        blank=True,
                        help_text="Progress status",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="larpmanager.progressstep",
                    ),
                ),
            ],
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="TextVersion",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "tp",
                    models.CharField(
                        choices=[
                            ("p", "Plot"),
                            ("c", "Character"),
                            ("h", "Faction"),
                            ("q", "Quest"),
                            ("t", "Trait"),
                            ("a", "Article"),
                            ("o", "Handout"),
                            ("g", "Prologue"),
                            ("e", "QuestType"),
                            ("s", "SpeedLarp"),
                            ("r", "PlotCharacter"),
                            ("l", "Relationship"),
                        ],
                        max_length=1,
                    ),
                ),
                ("eid", models.IntegerField()),
                ("version", models.IntegerField()),
                ("concept", tinymce.models.HTMLField(blank=True)),
                ("teaser", tinymce.models.HTMLField(blank=True)),
                ("text", tinymce.models.HTMLField(blank=True)),
                ("preview", tinymce.models.HTMLField(blank=True)),
                ("dl", models.BooleanField(default=False)),
                (
                    "member",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="text_versions",
                        to="larpmanager.member",
                    ),
                ),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Trait",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("number", models.IntegerField()),
                ("name", models.CharField(max_length=150)),
                (
                    "concept",
                    models.TextField(
                        blank=True, help_text="Concept for internal use only. Will not be published", max_length=5000
                    ),
                ),
                (
                    "teaser",
                    tinymce.models.HTMLField(
                        blank=True,
                        help_text="Presentation visible to all players, when 'show presentation' is checked",
                        max_length=10000,
                        verbose_name="Presentation",
                    ),
                ),
                (
                    "text",
                    tinymce.models.HTMLField(
                        blank=True,
                        help_text="Text visible only by the assigned player, when 'show text' is checked",
                        max_length=100000,
                    ),
                ),
                (
                    "preview",
                    tinymce.models.HTMLField(
                        blank=True,
                        help_text="Preview visible only by the assigned player, when 'show preview' is checked",
                        max_length=10000,
                    ),
                ),
                ("temp", models.BooleanField(default=False)),
                ("props", models.CharField(blank=True, help_text="Does it require special props?", max_length=500)),
                (
                    "role",
                    models.CharField(
                        blank=True,
                        help_text="Does the character have a public role/archetype? If not, leave blank",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "safety",
                    models.CharField(
                        blank=True, help_text="Indicates accurate safety information", max_length=500, null=True
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[("m", "Male"), ("f", "Female"), ("u", "Unisex")],
                        default=None,
                        help_text="Select the character's gender",
                        max_length=1,
                        null=True,
                        verbose_name="Gender",
                    ),
                ),
                (
                    "keywords",
                    models.CharField(
                        blank=True, help_text="Select the character's key words", max_length=500, null=True
                    ),
                ),
                ("hide", models.BooleanField(default=False)),
                (
                    "assigned",
                    models.ForeignKey(
                        blank=True,
                        help_text="Assigned staff member",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="larpmanager.member",
                    ),
                ),
                ("event", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.event")),
                (
                    "progress",
                    models.ForeignKey(
                        blank=True,
                        help_text="Progress status",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="larpmanager.progressstep",
                    ),
                ),
                (
                    "quest",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="traits",
                        to="larpmanager.quest",
                    ),
                ),
                ("traits", models.ManyToManyField(to="larpmanager.trait")),
            ],
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="AssignmentTrait",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("typ", models.IntegerField()),
                (
                    "member",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assignments",
                        to="larpmanager.member",
                    ),
                ),
                (
                    "run",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assignments",
                        to="larpmanager.run",
                    ),
                ),
                (
                    "trait",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assignments",
                        to="larpmanager.trait",
                    ),
                ),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="UrlShortner",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("number", models.IntegerField()),
                ("name", models.CharField(max_length=150)),
                (
                    "cod",
                    models.CharField(
                        db_index=True, default=larpmanager.models.utils.my_uuid_miny, max_length=5, unique=True
                    ),
                ),
                ("url", models.URLField(max_length=300)),
                ("assoc", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.association")),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Util",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("number", models.IntegerField()),
                ("name", models.CharField(max_length=150)),
                ("cod", models.CharField(max_length=16, null=True)),
                ("util", models.FileField(upload_to=larpmanager.models.utils.UploadToPathAndRename("../utils/"))),
                ("event", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.event")),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="VolunteerRegistry",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("start", models.DateField(null=True)),
                ("end", models.DateField(blank=True, null=True)),
                (
                    "assoc",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="volunteers",
                        to="larpmanager.association",
                    ),
                ),
                (
                    "member",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="volunteer", to="larpmanager.member"
                    ),
                ),
            ],
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Vote",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("year", models.IntegerField()),
                ("number", models.IntegerField()),
                (
                    "assoc",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="votes", to="larpmanager.association"
                    ),
                ),
                (
                    "candidate",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="votes_received",
                        to="larpmanager.member",
                    ),
                ),
                (
                    "member",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="votes_given", to="larpmanager.member"
                    ),
                ),
            ],
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="WorkshopMemberRel",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("member", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.member")),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="WorkshopModule",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("search", models.CharField(editable=False, max_length=150)),
                ("is_generic", models.BooleanField(default=False)),
                ("display", models.CharField(max_length=50)),
                ("number", models.IntegerField(blank=True)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="workshops", to="larpmanager.event"
                    ),
                ),
                (
                    "members",
                    models.ManyToManyField(
                        related_name="workshops", through="larpmanager.WorkshopMemberRel", to="larpmanager.member"
                    ),
                ),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.AddField(
            model_name="workshopmemberrel",
            name="workshop",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.workshopmodule"),
        ),
        migrations.CreateModel(
            name="WorkshopQuestion",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("search", models.CharField(editable=False, max_length=200)),
                ("display", models.CharField(max_length=200)),
                ("number", models.IntegerField(blank=True)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="workshop_questions",
                        to="larpmanager.event",
                    ),
                ),
                (
                    "module",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="questions",
                        to="larpmanager.workshopmodule",
                    ),
                ),
            ],
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="WorkshopOption",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("search", models.CharField(editable=False, max_length=500)),
                ("display", models.CharField(max_length=500)),
                ("is_correct", models.BooleanField(default=False)),
                ("number", models.IntegerField(blank=True)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="workshop_options",
                        to="larpmanager.event",
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="options",
                        to="larpmanager.workshopquestion",
                    ),
                ),
            ],
            options={
                "ordering": ["-updated"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="AssociationConfig",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=150)),
                ("value", models.CharField(max_length=1000)),
                (
                    "assoc",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="configs",
                        to="larpmanager.association",
                    ),
                ),
            ],
            options={
                "indexes": [models.Index(fields=["assoc", "name"], name="larpmanager_assoc_i_fea18c_idx")],
                "constraints": [
                    models.UniqueConstraint(
                        fields=("assoc", "name", "deleted"), name="unique_assoc_config_with_optional"
                    ),
                    models.UniqueConstraint(
                        condition=models.Q(("deleted", None)),
                        fields=("assoc", "name"),
                        name="unique_assoc_config_without_optional",
                    ),
                ],
                "unique_together": {("assoc", "name")},
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="AssocText",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("number", models.IntegerField(blank=True, null=True)),
                ("text", tinymce.models.HTMLField(blank=True, null=True)),
                (
                    "typ",
                    models.CharField(
                        choices=[
                            ("p", "Profile"),
                            ("h", "Home"),
                            ("u", "Registration mail"),
                            ("m", "Membership"),
                            ("s", "Statute"),
                            ("l", "Legal notice"),
                            ("f", "Footer"),
                            ("t", "Terms and Conditions"),
                            ("r", "Receipt"),
                            ("g", "Mail signature"),
                            ("y", "Privacy"),
                            ("rm", "Reminder membership request"),
                            ("rf", "Reminder membership fee"),
                            ("rp", "Reminder payment"),
                            ("rr", "Reminder profile"),
                        ],
                        help_text="Type of text",
                        max_length=2,
                        verbose_name="Type",
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        choices=[
                            ("en", "English"),
                            ("it", "Italiano"),
                            ("es", "Español"),
                            ("de", "Deutsch"),
                            ("fr", "Français"),
                            ("cs", "Čeština"),
                            ("pl", "Polski"),
                            ("nl", "Nederlands"),
                            ("nb", "Norsk"),
                            ("sv", "Svenska"),
                        ],
                        default="en",
                        help_text="Text language",
                        max_length=3,
                        null=True,
                        verbose_name="Language",
                    ),
                ),
                ("default", models.BooleanField(default=True)),
                (
                    "assoc",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="texts", to="larpmanager.association"
                    ),
                ),
            ],
            options={
                "constraints": [
                    models.UniqueConstraint(
                        fields=("assoc", "typ", "language", "deleted"), name="unique_assoc_text_with_optional"
                    ),
                    models.UniqueConstraint(
                        condition=models.Q(("deleted", None)),
                        fields=("assoc", "typ", "language"),
                        name="nique_assoc_text_without_optional",
                    ),
                ],
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="CharacterConfig",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=150)),
                ("value", models.CharField(max_length=5000)),
                (
                    "character",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="configs", to="larpmanager.character"
                    ),
                ),
            ],
            options={
                "indexes": [models.Index(fields=["character", "name"], name="larpmanager_charact_7220aa_idx")],
                "unique_together": {("character", "name")},
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="DeliveryPx",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("number", models.IntegerField()),
                ("name", models.CharField(max_length=150)),
                ("amount", models.IntegerField()),
                (
                    "characters",
                    models.ManyToManyField(blank=True, related_name="px_delivery_list", to="larpmanager.character"),
                ),
                ("event", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.event")),
            ],
            options={
                "indexes": [models.Index(fields=["number", "event"], name="larpmanager_number_9a1f75_idx")],
                "constraints": [
                    models.UniqueConstraint(
                        fields=("event", "number", "deleted"), name="unique_delivery_with_optional"
                    ),
                    models.UniqueConstraint(
                        condition=models.Q(("deleted", None)),
                        fields=("event", "number"),
                        name="unique_delivery_without_optional",
                    ),
                ],
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.AddIndex(
            model_name="abilitytypepx",
            index=models.Index(fields=["number", "event"], name="larpmanager_number_221191_idx"),
        ),
        migrations.AddConstraint(
            model_name="abilitytypepx",
            constraint=models.UniqueConstraint(
                fields=("event", "number", "deleted"), name="unique_ability_type_with_optional"
            ),
        ),
        migrations.AddConstraint(
            model_name="abilitytypepx",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", None)),
                fields=("event", "number"),
                name="unique_ability_type_without_optional",
            ),
        ),
        migrations.AddIndex(
            model_name="abilitypx",
            index=models.Index(fields=["number", "event"], name="larpmanager_number_e9171d_idx"),
        ),
        migrations.AddConstraint(
            model_name="abilitypx",
            constraint=models.UniqueConstraint(
                fields=("event", "number", "deleted"), name="unique_ability_with_optional"
            ),
        ),
        migrations.AddConstraint(
            model_name="abilitypx",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", None)),
                fields=("event", "number"),
                name="unique_ability_without_optional",
            ),
        ),
        migrations.AddIndex(
            model_name="eventbutton",
            index=models.Index(fields=["number", "event"], name="larpmanager_number_dbd4c7_idx"),
        ),
        migrations.AddConstraint(
            model_name="eventbutton",
            constraint=models.UniqueConstraint(
                fields=("event", "number", "deleted"), name="unique_event_button_with_optional"
            ),
        ),
        migrations.AddConstraint(
            model_name="eventbutton",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", None)),
                fields=("event", "number"),
                name="unique_event_button_without_optional",
            ),
        ),
        migrations.AddIndex(
            model_name="eventconfig",
            index=models.Index(fields=["event", "name"], name="larpmanager_event_i_ce3671_idx"),
        ),
        migrations.AddConstraint(
            model_name="eventconfig",
            constraint=models.UniqueConstraint(
                fields=("event", "name", "deleted"), name="unique_event_config_with_optional"
            ),
        ),
        migrations.AddConstraint(
            model_name="eventconfig",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", None)),
                fields=("event", "name"),
                name="unique_event_config_without_optional",
            ),
        ),
        migrations.AddConstraint(
            model_name="eventtext",
            constraint=models.UniqueConstraint(
                fields=("event", "typ", "language", "deleted"), name="unique_event_text_with_optional"
            ),
        ),
        migrations.AddConstraint(
            model_name="eventtext",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", None)),
                fields=("event", "typ", "language"),
                name="nique_event_text_without_optional",
            ),
        ),
        migrations.AddConstraint(
            model_name="event",
            constraint=models.UniqueConstraint(fields=("slug", "deleted"), name="unique_event_with_optional"),
        ),
        migrations.AddConstraint(
            model_name="event",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", None)), fields=("slug",), name="unique_event_without_optional"
            ),
        ),
        migrations.AddConstraint(
            model_name="handouttemplate",
            constraint=models.UniqueConstraint(fields=("event", "number", "deleted"), name="unique_ht_with_optional"),
        ),
        migrations.AddConstraint(
            model_name="handouttemplate",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", None)), fields=("event", "number"), name="unique_ht_without_optional"
            ),
        ),
        migrations.AddIndex(
            model_name="eventrole",
            index=models.Index(fields=["number", "event"], name="larpmanager_number_2f78ba_idx"),
        ),
        migrations.AddConstraint(
            model_name="eventrole",
            constraint=models.UniqueConstraint(
                fields=("event", "number", "deleted"), name="unique_event_role_with_optional"
            ),
        ),
        migrations.AddConstraint(
            model_name="eventrole",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", None)),
                fields=("event", "number"),
                name="unique_event_role_without_optional",
            ),
        ),
        migrations.AddConstraint(
            model_name="contact",
            constraint=models.UniqueConstraint(fields=("me", "you", "deleted"), name="unique_contact_with_optional"),
        ),
        migrations.AddConstraint(
            model_name="contact",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", None)), fields=("me", "you"), name="unique_contact_without_optional"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="competencememberrel",
            unique_together={("competence", "member", "deleted")},
        ),
        migrations.AddConstraint(
            model_name="assocrole",
            constraint=models.UniqueConstraint(
                fields=("assoc", "number", "deleted"), name="unique_assoc_role_with_optional"
            ),
        ),
        migrations.AddConstraint(
            model_name="assocrole",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", None)),
                fields=("assoc", "number"),
                name="unique_assoc_role_without_optional",
            ),
        ),
        migrations.AddConstraint(
            model_name="membership",
            constraint=models.UniqueConstraint(
                fields=("member", "assoc", "deleted"), name="unique_membership_number_with_optional"
            ),
        ),
        migrations.AddConstraint(
            model_name="membership",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", None)),
                fields=("member", "assoc"),
                name="unique_membership_number_without_optional",
            ),
        ),
        migrations.AddConstraint(
            model_name="electronicinvoice",
            constraint=models.UniqueConstraint(
                fields=("number", "year", "assoc", "deleted"), name="unique_number_with_optional"
            ),
        ),
        migrations.AddConstraint(
            model_name="electronicinvoice",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", None)),
                fields=("number", "year", "assoc"),
                name="unique_number_without_optional",
            ),
        ),
        migrations.AddConstraint(
            model_name="electronicinvoice",
            constraint=models.UniqueConstraint(
                fields=("progressive", "deleted"), name="unique_progressive_with_optional"
            ),
        ),
        migrations.AddConstraint(
            model_name="electronicinvoice",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", None)),
                fields=("progressive",),
                name="unique_progressive_without_optional",
            ),
        ),
        migrations.AddIndex(
            model_name="accountingitemmembership",
            index=models.Index(fields=["assoc", "year"], name="larpmanager_assoc_i_f4986d_idx"),
        ),
        migrations.AddConstraint(
            model_name="association",
            constraint=models.UniqueConstraint(fields=("slug", "deleted"), name="unique_association_with_optional"),
        ),
        migrations.AddConstraint(
            model_name="association",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", None)), fields=("slug",), name="unique_association_without_optional"
            ),
        ),
        migrations.AddConstraint(
            model_name="plotcharacterrel",
            constraint=models.UniqueConstraint(
                fields=("plot", "character", "deleted"), name="unique_plot_character_rel_with_optional"
            ),
        ),
        migrations.AddConstraint(
            model_name="plotcharacterrel",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", None)),
                fields=("plot", "character"),
                name="unique_plot_character_rel_without_optional",
            ),
        ),
        migrations.AddConstraint(
            model_name="preregistration",
            constraint=models.UniqueConstraint(
                fields=("event", "member", "deleted"), name="unique_prereg_with_optional"
            ),
        ),
        migrations.AddConstraint(
            model_name="preregistration",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", None)), fields=("event", "member"), name="unique_prereg_without_optional"
            ),
        ),
        migrations.AddIndex(
            model_name="progressstep",
            index=models.Index(fields=["number", "event"], name="larpmanager_number_fc6ecc_idx"),
        ),
        migrations.AddConstraint(
            model_name="progressstep",
            constraint=models.UniqueConstraint(
                fields=("event", "number", "deleted"), name="unique_ProgressStep_with_optional"
            ),
        ),
        migrations.AddConstraint(
            model_name="progressstep",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", None)),
                fields=("event", "number"),
                name="unique_ProgressStep_without_optional",
            ),
        ),
        migrations.AddIndex(
            model_name="plot",
            index=models.Index(fields=["number", "event"], name="larpmanager_number_ec43b4_idx"),
        ),
        migrations.AddConstraint(
            model_name="plot",
            constraint=models.UniqueConstraint(fields=("event", "number", "deleted"), name="unique_plot_with_optional"),
        ),
        migrations.AddConstraint(
            model_name="plot",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", None)), fields=("event", "number"), name="unique_plot_without_optional"
            ),
        ),
        migrations.AddIndex(
            model_name="handout",
            index=models.Index(fields=["number", "event"], name="larpmanager_number_96bd1f_idx"),
        ),
        migrations.AddConstraint(
            model_name="handout",
            constraint=models.UniqueConstraint(
                fields=("event", "number", "deleted"), name="unique_handout_with_optional"
            ),
        ),
        migrations.AddConstraint(
            model_name="handout",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", None)),
                fields=("event", "number"),
                name="unique_handout_without_optional",
            ),
        ),
        migrations.AddIndex(
            model_name="faction",
            index=models.Index(fields=["number", "event", "order"], name="larpmanager_number_0ac414_idx"),
        ),
        migrations.AddIndex(
            model_name="prologuetype",
            index=models.Index(fields=["number", "event"], name="larpmanager_number_c0f254_idx"),
        ),
        migrations.AddIndex(
            model_name="prologue",
            index=models.Index(fields=["number", "event"], name="larpmanager_number_f2571a_idx"),
        ),
        migrations.AddConstraint(
            model_name="prologue",
            constraint=models.UniqueConstraint(
                fields=("event", "number", "typ", "deleted"), name="unique_prologue_with_optional"
            ),
        ),
        migrations.AddConstraint(
            model_name="prologue",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", None)),
                fields=("event", "number", "typ"),
                name="unique_prologue_without_optional",
            ),
        ),
        migrations.AddIndex(
            model_name="questtype",
            index=models.Index(fields=["number", "event"], name="larpmanager_number_1306f3_idx"),
        ),
        migrations.AddIndex(
            model_name="quest",
            index=models.Index(fields=["number", "event"], name="larpmanager_number_0084bb_idx"),
        ),
        migrations.AddConstraint(
            model_name="quest",
            constraint=models.UniqueConstraint(
                fields=("event", "number", "deleted"), name="unique_quest_with_optional"
            ),
        ),
        migrations.AddConstraint(
            model_name="quest",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", None)), fields=("event", "number"), name="unique_quest_without_optional"
            ),
        ),
        migrations.AddConstraint(
            model_name="playerrelationship",
            constraint=models.UniqueConstraint(
                fields=("reg", "target", "deleted"), name="unique_player_relationship_with_optional"
            ),
        ),
        migrations.AddConstraint(
            model_name="playerrelationship",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", None)),
                fields=("reg", "target"),
                name="unique_player_relationship_without_optional",
            ),
        ),
        migrations.AddIndex(
            model_name="paymentinvoice",
            index=models.Index(fields=["key", "status"], name="larpmanager_key_800770_idx"),
        ),
        migrations.AddIndex(
            model_name="paymentinvoice",
            index=models.Index(fields=["assoc", "cod"], name="larpmanager_assoc_i_ade55e_idx"),
        ),
        migrations.AddIndex(
            model_name="accountingitempayment",
            index=models.Index(fields=["pay", "reg"], name="larpmanager_pay_93a76d_idx"),
        ),
        migrations.AddConstraint(
            model_name="registrationquota",
            constraint=models.UniqueConstraint(
                fields=("event", "number", "deleted"), name="unique_registraion_quota_with_optional"
            ),
        ),
        migrations.AddConstraint(
            model_name="registrationquota",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", None)),
                fields=("event", "number"),
                name="unique_registraion_quota_without_optional",
            ),
        ),
        migrations.AddConstraint(
            model_name="registrationsurcharge",
            constraint=models.UniqueConstraint(
                fields=("event", "number", "deleted"), name="unique_registration_surcharge_with_optional"
            ),
        ),
        migrations.AddConstraint(
            model_name="registrationsurcharge",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", None)),
                fields=("event", "number"),
                name="unique_registration_surcharge_without_optional",
            ),
        ),
        migrations.AddConstraint(
            model_name="registrationinstallment",
            constraint=models.UniqueConstraint(
                fields=("event", "number", "deleted"), name="unique_registration_installment_with_optional"
            ),
        ),
        migrations.AddConstraint(
            model_name="registrationinstallment",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", None)),
                fields=("event", "number"),
                name="unique_registration_installment_without_optional",
            ),
        ),
        migrations.AddConstraint(
            model_name="relationship",
            constraint=models.UniqueConstraint(
                fields=("source", "target", "deleted"), name="unique_relationship_with_optional"
            ),
        ),
        migrations.AddConstraint(
            model_name="relationship",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", None)),
                fields=("source", "target"),
                name="unique_relationship_without_optional",
            ),
        ),
        migrations.AddIndex(
            model_name="character",
            index=models.Index(fields=["number", "event"], name="larpmanager_number_14b23e_idx"),
        ),
        migrations.AddConstraint(
            model_name="character",
            constraint=models.UniqueConstraint(
                fields=("event", "number", "deleted"), name="unique_character_with_optional"
            ),
        ),
        migrations.AddConstraint(
            model_name="character",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", None)),
                fields=("event", "number"),
                name="unique_character_without_optional",
            ),
        ),
        migrations.AddConstraint(
            model_name="run",
            constraint=models.UniqueConstraint(fields=("event", "number", "deleted"), name="unique_run_with_optional"),
        ),
        migrations.AddConstraint(
            model_name="run",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", None)), fields=("event", "number"), name="unique_run_without_optional"
            ),
        ),
        migrations.AddIndex(
            model_name="registration",
            index=models.Index(fields=["run", "member", "cancellation_date"], name="larpmanager_run_id_1b7181_idx"),
        ),
        migrations.AddConstraint(
            model_name="registration",
            constraint=models.UniqueConstraint(
                fields=("run", "member", "cancellation_date", "redeem_code", "deleted"),
                name="unique_registraion_with_optional",
            ),
        ),
        migrations.AddConstraint(
            model_name="registration",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", None)),
                fields=("run", "member", "redeem_code", "cancellation_date"),
                name="unique_registraion_without_optional",
            ),
        ),
        migrations.AddConstraint(
            model_name="discount",
            constraint=models.UniqueConstraint(
                fields=("event", "number", "deleted"), name="unique_discount_with_optional"
            ),
        ),
        migrations.AddConstraint(
            model_name="discount",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", None)),
                fields=("event", "number"),
                name="unique_discount_without_optional",
            ),
        ),
        migrations.AddIndex(
            model_name="accountingitemother",
            index=models.Index(fields=["run", "oth"], name="larpmanager_run_id_9346af_idx"),
        ),
        migrations.AddIndex(
            model_name="runconfig",
            index=models.Index(fields=["run", "name"], name="larpmanager_run_id_1db091_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="runconfig",
            unique_together={("run", "name")},
        ),
        migrations.AddIndex(
            model_name="speedlarp",
            index=models.Index(fields=["number", "event"], name="larpmanager_number_edd04a_idx"),
        ),
        migrations.AddIndex(
            model_name="trait",
            index=models.Index(fields=["number", "event"], name="larpmanager_number_a7c74d_idx"),
        ),
        migrations.AddConstraint(
            model_name="trait",
            constraint=models.UniqueConstraint(
                fields=("event", "number", "deleted"), name="unique_trait_with_optional"
            ),
        ),
        migrations.AddConstraint(
            model_name="trait",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", None)), fields=("event", "number"), name="unique_trait_without_optional"
            ),
        ),
        migrations.AddConstraint(
            model_name="volunteerregistry",
            constraint=models.UniqueConstraint(
                fields=("member", "assoc", "deleted"), name="unique_volunteer_registry_with_optional"
            ),
        ),
        migrations.AddConstraint(
            model_name="volunteerregistry",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", None)),
                fields=("member", "assoc"),
                name="unique_volunteer_registry_without_optional",
            ),
        ),
        migrations.AddConstraint(
            model_name="vote",
            constraint=models.UniqueConstraint(
                fields=("member", "assoc", "year", "number", "deleted"), name="unique_vote_number_with_optional"
            ),
        ),
        migrations.AddConstraint(
            model_name="vote",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", None)),
                fields=("member", "assoc", "year", "number"),
                name="unique_vote_number_without_optional",
            ),
        ),
        migrations.AddConstraint(
            model_name="workshopquestion",
            constraint=models.UniqueConstraint(fields=("module", "number", "deleted"), name="unique workshop question"),
        ),
    ]
