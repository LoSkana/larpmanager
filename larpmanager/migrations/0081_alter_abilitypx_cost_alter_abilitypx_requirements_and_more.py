# Generated by Django 5.2.5 on 2025-09-15 09:13

import datetime

import django.db.models.deletion
import model_clone.mixin
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("larpmanager", "0080_alter_writingquestion_applicable"),
    ]

    operations = [
        migrations.AlterField(
            model_name="abilitypx",
            name="cost",
            field=models.IntegerField(
                default=0, help_text="Note that if the cost is 0, it will be automatically assigned"
            ),
        ),
        migrations.AlterField(
            model_name="abilitypx",
            name="requirements",
            field=models.ManyToManyField(
                blank=True,
                help_text="Indicate the character options, which must be selected to make the skill available",
                related_name="abilities",
                to="larpmanager.writingoption",
                verbose_name="Requirements",
            ),
        ),
        migrations.CreateModel(
            name="ModifierPx",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("number", models.IntegerField()),
                ("name", models.CharField(max_length=150)),
                (
                    "cost",
                    models.IntegerField(
                        default=0, help_text="Note that if the cost is 0, it will be automatically assigned"
                    ),
                ),
                ("order", models.IntegerField()),
                (
                    "abilities",
                    models.ManyToManyField(blank=True, related_name="modifiers_abilities", to="larpmanager.abilitypx"),
                ),
                ("event", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.event")),
                (
                    "prerequisites",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Indicate the prerequisite abilities",
                        related_name="modifiers_prerequisites",
                        to="larpmanager.abilitypx",
                        verbose_name="Pre-requisites",
                    ),
                ),
                (
                    "requirements",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Indicate the required character options",
                        related_name="modifiers_requirements",
                        to="larpmanager.writingoption",
                        verbose_name="Requirements",
                    ),
                ),
            ],
            options={
                "indexes": [models.Index(fields=["number", "event"], name="larpmanager_number_cbb709_idx")],
                "constraints": [
                    models.UniqueConstraint(
                        fields=("event", "number", "deleted"), name="unique_modifier_with_optional"
                    ),
                    models.UniqueConstraint(
                        condition=models.Q(("deleted", None)),
                        fields=("event", "number"),
                        name="unique_modifier_without_optional",
                    ),
                ],
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
    ]
