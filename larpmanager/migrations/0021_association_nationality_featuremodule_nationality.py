# Generated by Django 5.1 on 2025-05-28 09:06
from django.core.exceptions import ObjectDoesNotExist
from django.db import migrations, models


def clean_fields(apps, schema_editor):
    """
    Database migration to clean up registration fields and convert features to configs.

    Args:
        apps: Django apps registry for accessing models
        schema_editor: Database schema editor for migration operations
    """
    # create question and answer to save data in "cocreation"
    Registration = apps.get_model("larpmanager", "Registration")
    RegistrationQuestion = apps.get_model("larpmanager", "RegistrationQuestion")
    RegistrationAnswer = apps.get_model("larpmanager", "RegistrationAnswer")
    for reg in Registration.objects.exclude(info="").exclude(info__isnull=True):
        (que, cr) = RegistrationQuestion.objects.get_or_create(
            event=reg.run.event,
            typ="p",
            display="More information",
            description="Write here additional information to your registration",
        )
        (ca, cr) = RegistrationAnswer.objects.get_or_create(reg_id=reg.id, question=que)
        ca.text = reg.info
        ca.save()

    # Delete feature info
    Feature = apps.get_model("larpmanager", "Feature")
    Feature.objects.filter(id__in=[117]).delete()

    # switch feature to configs
    EventConfig = apps.get_model("larpmanager", "EventConfig")
    features = {180: "unique_code", 155: "reg_que_allowed"}
    for feature_id, feature_name in features.items():
        try:
            feature = Feature.objects.get(pk=feature_id)
        except ObjectDoesNotExist:
            continue

        for event in feature.events.all():
            EventConfig.objects.create(name=f"registration_{feature_name}", value="True", event=event)
        feature.delete()


class Migration(migrations.Migration):
    dependencies = [
        ("larpmanager", "0020_clean_cocreation"),
    ]

    operations = [
        migrations.RunPython(clean_fields),
        migrations.AddField(
            model_name="association",
            name="nationality",
            field=models.CharField(
                blank=True,
                choices=[("it", "Italy")],
                help_text="Indicate the organization nationality to activate nation-specific features",
                max_length=2,
                null=True,
                verbose_name="Nationality",
            ),
        ),
        migrations.AddField(
            model_name="featuremodule",
            name="nationality",
            field=models.CharField(blank=True, choices=[("it", "Italy")], max_length=2, null=True),
        ),
        migrations.RemoveField(
            model_name="registration",
            name="info",
        ),
    ]
