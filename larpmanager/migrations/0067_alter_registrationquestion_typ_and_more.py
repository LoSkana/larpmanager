# Generated by Django 5.2 on 2025-08-22 20:22

import datetime

import django.db.models.deletion
import model_clone.mixin
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("larpmanager", "0066_remove_inventoryitem_tags_inventorytag_and_more"),
    ]

    operations = [
        migrations.AlterField(
            model_name="registrationquestion",
            name="typ",
            field=models.CharField(
                choices=[
                    ("s", "Single choice"),
                    ("m", "Multiple choice"),
                    ("t", "Single-line text"),
                    ("p", "Multi-line text"),
                    ("e", "Advanced text editor"),
                    ("name", "Name"),
                    ("teaser", "Presentation"),
                    ("text", "Sheet"),
                    ("cover", "Cover"),
                    ("faction", "Factions"),
                    ("title", "Title"),
                    ("mirror", "Mirror"),
                    ("hide", "Hide"),
                    ("progress", "Progress"),
                    ("assigned", "Assigned"),
                    ("c", "Computed"),
                ],
                default="s",
                help_text="Question type",
                max_length=10,
                verbose_name="Type",
            ),
        ),
        migrations.AlterField(
            model_name="writingquestion",
            name="typ",
            field=models.CharField(
                choices=[
                    ("s", "Single choice"),
                    ("m", "Multiple choice"),
                    ("t", "Single-line text"),
                    ("p", "Multi-line text"),
                    ("e", "Advanced text editor"),
                    ("name", "Name"),
                    ("teaser", "Presentation"),
                    ("text", "Sheet"),
                    ("cover", "Cover"),
                    ("faction", "Factions"),
                    ("title", "Title"),
                    ("mirror", "Mirror"),
                    ("hide", "Hide"),
                    ("progress", "Progress"),
                    ("assigned", "Assigned"),
                    ("c", "Computed"),
                ],
                default="s",
                help_text="Question type",
                max_length=10,
                verbose_name="Type",
            ),
        ),
        migrations.CreateModel(
            name="RulePx",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("number", models.IntegerField()),
                ("name", models.CharField(max_length=150)),
                (
                    "operation",
                    models.CharField(
                        choices=[
                            ("ADD", "Addition"),
                            ("SUB", "Subtraction"),
                            ("MUL", "Multiplication"),
                            ("DIV", "Division"),
                        ],
                        default="ADD",
                        max_length=3,
                    ),
                ),
                ("amount", models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ("order", models.IntegerField(default=0)),
                ("abilities", models.ManyToManyField(blank=True, related_name="rules", to="larpmanager.abilitypx")),
                ("event", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.event")),
                (
                    "field",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="larpmanager.writingquestion"),
                ),
            ],
            options={
                "ordering": ["event", "number"],
                "abstract": False,
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
    ]
