# Generated by Django 5.2 on 2025-10-12 17:41

import datetime

import django.db.models.deletion
import model_clone.mixin
from django.db import migrations, models

import larpmanager.models.utils


class Migration(migrations.Migration):
    dependencies = [
        ("larpmanager", "0091_alter_featuremodule_slug_alter_permissionmodule_slug"),
    ]

    operations = [
        migrations.CreateModel(
            name="OneTimeContent",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(
                        help_text="Descriptive name for this content", max_length=200, verbose_name="Content name"
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Optional description of the content", verbose_name="Description"
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        help_text="Video or audio file to be streamed (recommended: MP4, WebM, MP3)",
                        upload_to=larpmanager.models.utils.UploadToPathAndRename("onetime_content/"),
                        verbose_name="Media file",
                    ),
                ),
                (
                    "content_type",
                    models.CharField(
                        blank=True,
                        help_text="MIME type of the file (e.g., video/mp4)",
                        max_length=100,
                        verbose_name="Content type",
                    ),
                ),
                (
                    "file_size",
                    models.BigIntegerField(default=0, help_text="Size of the file in bytes", verbose_name="File size"),
                ),
                (
                    "duration",
                    models.IntegerField(
                        blank=True, help_text="Duration in seconds (optional)", null=True, verbose_name="Duration"
                    ),
                ),
                (
                    "active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this content is currently available for access",
                        verbose_name="Active",
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        help_text="The event this content belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="onetime_contents",
                        to="larpmanager.event",
                        verbose_name="Event",
                    ),
                ),
            ],
            options={
                "verbose_name": "One-Time Content",
                "verbose_name_plural": "One-Time Contents",
                "ordering": ["-created"],
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="OneTimeAccessToken",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("deleted", models.DateTimeField(db_index=True, editable=False, null=True)),
                ("deleted_by_cascade", models.BooleanField(default=False, editable=False)),
                ("created", models.DateTimeField(default=datetime.datetime.now, editable=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "token",
                    models.CharField(db_index=True, editable=False, max_length=64, unique=True, verbose_name="Token"),
                ),
                (
                    "note",
                    models.CharField(
                        blank=True,
                        help_text="Optional note about this token (e.g., recipient name, purpose)",
                        max_length=500,
                        verbose_name="Note",
                    ),
                ),
                (
                    "used",
                    models.BooleanField(
                        default=False, help_text="Whether this token has been used", verbose_name="Used"
                    ),
                ),
                (
                    "used_at",
                    models.DateTimeField(
                        blank=True, help_text="When this token was used", null=True, verbose_name="Used at"
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="IP address from which the token was used",
                        null=True,
                        verbose_name="IP address",
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(
                        blank=True, help_text="Browser user agent string from the access", verbose_name="User agent"
                    ),
                ),
                (
                    "used_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="Member who used this token (if authenticated)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="used_onetime_tokens",
                        to="larpmanager.member",
                        verbose_name="Used by",
                    ),
                ),
                (
                    "content",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="access_tokens",
                        to="larpmanager.onetimecontent",
                        verbose_name="Content",
                    ),
                ),
            ],
            options={
                "verbose_name": "One-Time Access Token",
                "verbose_name_plural": "One-Time Access Tokens",
                "ordering": ["-created"],
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
    ]
